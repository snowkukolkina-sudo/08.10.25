import Geolocation from '@react-native-community/geolocation';
import AsyncStorage from '@react-native-async-storage/async-storage';

class LocationService {
  constructor() {
    this.watchId = null;
    this.currentLocation = null;
    this.trackingInterval = null;
    this.apiUrl = 'http://localhost:3000/api/courier';
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ GPS
  startTracking() {
    console.log('üìç –ó–∞–ø—É—Å–∫ GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞...');
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    this.getCurrentPosition();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    this.watchId = Geolocation.watchPosition(
      (position) => {
        this.currentLocation = {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          accuracy: position.coords.accuracy,
          timestamp: position.timestamp,
        };
        
        console.log('üìç –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', this.currentLocation);
        this.sendLocationToServer();
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
      },
      {
        enableHighAccuracy: true,
        distanceFilter: 50, // –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 50 –º–µ—Ç—Ä–æ–≤
        interval: 10000, // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        fastestInterval: 5000, // –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
      }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    this.trackingInterval = setInterval(() => {
      this.sendLocationToServer();
    }, 15000);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
  stopTracking() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞...');
    
    if (this.watchId !== null) {
      Geolocation.clearWatch(this.watchId);
      this.watchId = null;
    }

    if (this.trackingInterval) {
      clearInterval(this.trackingInterval);
      this.trackingInterval = null;
    }

    this.currentLocation = null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
  async getCurrentPosition() {
    return new Promise((resolve, reject) => {
      Geolocation.getCurrentPosition(
        (position) => {
          this.currentLocation = {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
            accuracy: position.coords.accuracy,
            timestamp: position.timestamp,
          };
          resolve(this.currentLocation);
        },
        (error) => {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error);
          reject(error);
        },
        {
          enableHighAccuracy: true,
          timeout: 15000,
          maximumAge: 10000,
        }
      );
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  async sendLocationToServer() {
    if (!this.currentLocation) return;

    try {
      const courierId = await this.getCourierId();
      if (!courierId) return;

      const response = await fetch(`${this.apiUrl}/location`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          courierId,
          latitude: this.currentLocation.latitude,
          longitude: this.currentLocation.longitude,
          accuracy: this.currentLocation.accuracy,
          timestamp: this.currentLocation.timestamp,
        }),
      });

      if (response.ok) {
        console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å ID –∫—É—Ä—å–µ—Ä–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  async getCourierId() {
    try {
      const courier = await AsyncStorage.getItem('courier');
      if (courier) {
        const courierData = JSON.parse(courier);
        return courierData.id;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫—É—Ä—å–µ—Ä–∞:', error);
    }
    return null;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (Haversine formula)
  calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = this.deg2rad(lat2 - lat1);
    const dLon = this.deg2rad(lon2 - lon1);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(this.deg2rad(lat1)) *
        Math.cos(this.deg2rad(lat2)) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
    return distance;
  }

  deg2rad(deg) {
    return deg * (Math.PI / 180);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatDistance(distanceInKm) {
    if (distanceInKm < 1) {
      return `${Math.round(distanceInKm * 1000)}–º`;
    }
    return `${distanceInKm.toFixed(1)}–∫–º`;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (—Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å 30 –∫–º/—á)
  estimateTime(distanceInKm) {
    const averageSpeed = 30; // –∫–º/—á
    const timeInHours = distanceInKm / averageSpeed;
    const timeInMinutes = Math.round(timeInHours * 60);
    
    if (timeInMinutes < 60) {
      return `${timeInMinutes} –º–∏–Ω`;
    }
    const hours = Math.floor(timeInMinutes / 60);
    const minutes = timeInMinutes % 60;
    return `${hours}—á ${minutes}–º–∏–Ω`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  getLocation() {
    return this.currentLocation;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  async checkPermissions() {
    return new Promise((resolve) => {
      Geolocation.getCurrentPosition(
        () => resolve(true),
        () => resolve(false),
        { enableHighAccuracy: false, timeout: 2000 }
      );
    });
  }
}

export default new LocationService();
