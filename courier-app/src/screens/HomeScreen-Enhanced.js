import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  RefreshControl,
  Alert,
  Platform,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { OrderService } from '../services/OrderService';
import { LocationService } from '../services/LocationService';

const HomeScreen = ({ navigation }) => {
  const [courier, setCourier] = useState(null);
  const [newOrders, setNewOrders] = useState([]);
  const [activeOrders, setActiveOrders] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [onShift, setOnShift] = useState(false);
  const [todayStats, setTodayStats] = useState({
    delivered: 0,
    earned: 0,
    hoursOnShift: 0,
  });

  useEffect(() => {
    loadCourierData();
    loadOrders();
    startLocationTracking();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadOrders, 10000);
    return () => clearInterval(interval);
  }, []);

  const loadCourierData = async () => {
    try {
      const courierData = await AsyncStorage.getItem('courier');
      if (courierData) {
        setCourier(JSON.parse(courierData));
      }
      const shiftStatus = await AsyncStorage.getItem('onShift');
      setOnShift(shiftStatus === 'true');
    } catch (error) {
      console.error('Error loading courier data:', error);
    }
  };

  const loadOrders = async () => {
    try {
      const orders = await OrderService.getAvailableOrders();
      const today = await OrderService.getTodayStats();
      
      setNewOrders(orders.filter(o => o.status === 'ready'));
      setActiveOrders(orders.filter(o => ['accepted', 'picked_up', 'in_transit'].includes(o.status)));
      setTodayStats(today);
    } catch (error) {
      console.error('Error loading orders:', error);
    }
  };

  const startLocationTracking = async () => {
    if (onShift) {
      LocationService.startTracking();
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await loadOrders();
    setRefreshing(false);
  };

  const acceptOrder = async (orderId) => {
    try {
      await OrderService.acceptOrder(orderId);
      Alert.alert('‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!', '–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ');
      loadOrders();
    } catch (error) {
      Alert.alert('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑');
    }
  };

  const rejectOrder = async (orderId) => {
    Alert.alert(
      '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              await OrderService.rejectOrder(orderId);
              loadOrders();
            } catch (error) {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑');
            }
          },
        },
      ]
    );
  };

  const toggleShift = async () => {
    const newStatus = !onShift;
    setOnShift(newStatus);
    await AsyncStorage.setItem('onShift', newStatus.toString());
    
    if (newStatus) {
      LocationService.startTracking();
      Alert.alert('‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞', '–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!');
    } else {
      LocationService.stopTracking();
      Alert.alert('üèÅ –°–º–µ–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞', '–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!');
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      ready: '#f59e0b',
      accepted: '#3b82f6',
      picked_up: '#8b5cf6',
      in_transit: '#06b6d4',
      delivered: '#10b981',
    };
    return colors[status] || '#6b7280';
  };

  const getStatusText = (status) => {
    const texts = {
      ready: 'üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
      accepted: '‚úÖ –ü—Ä–∏–Ω—è—Ç',
      picked_up: 'üè™ –ó–∞–±—Ä–∞–Ω',
      in_transit: 'üö¥ –í –ø—É—Ç–∏',
      delivered: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    };
    return texts[status] || status;
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <Text style={styles.headerName}>
            üö¥ {courier?.name || '–ö—É—Ä—å–µ—Ä'}
          </Text>
          <View style={styles.headerStats}>
            <Text style={styles.headerStat}>‚≠ê {courier?.rating || '5.0'}</Text>
            <Text style={styles.headerStat}>‚Ä¢</Text>
            <Text style={styles.headerStat}>
              {onShift ? 'üü¢ –ù–∞ —Å–º–µ–Ω–µ' : '‚ö™ –ù–µ –Ω–∞ —Å–º–µ–Ω–µ'}
            </Text>
          </View>
        </View>
        <TouchableOpacity onPress={() => navigation.navigate('Profile')}>
          <View style={styles.profileButton}>
            <Text style={styles.profileIcon}>üë§</Text>
          </View>
        </TouchableOpacity>
      </View>

      {/* Today Stats */}
      <View style={styles.statsContainer}>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>{todayStats.delivered}</Text>
          <Text style={styles.statLabel}>–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</Text>
        </View>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>{todayStats.earned}‚ÇΩ</Text>
          <Text style={styles.statLabel}>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</Text>
        </View>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>{todayStats.hoursOnShift}—á</Text>
          <Text style={styles.statLabel}>–ù–∞ —Å–º–µ–Ω–µ</Text>
        </View>
      </View>

      {/* Shift Toggle */}
      <TouchableOpacity
        style={[styles.shiftButton, onShift ? styles.shiftButtonActive : styles.shiftButtonInactive]}
        onPress={toggleShift}
      >
        <Text style={styles.shiftButtonText}>
          {onShift ? 'üèÅ –ó–ê–ö–û–ù–ß–ò–¢–¨ –°–ú–ï–ù–£' : '‚ñ∂Ô∏è –ù–ê–ß–ê–¢–¨ –°–ú–ï–ù–£'}
        </Text>
      </TouchableOpacity>

      <ScrollView
        style={styles.scrollView}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {/* New Orders */}
        {newOrders.length > 0 && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Text style={styles.sectionTitle}>üîî –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</Text>
              <View style={styles.badge}>
                <Text style={styles.badgeText}>{newOrders.length}</Text>
              </View>
            </View>

            {newOrders.map((order) => (
              <View key={order.id} style={styles.orderCard}>
                <View style={styles.orderHeader}>
                  <Text style={styles.orderId}>üì¶ –ó–∞–∫–∞–∑ #{order.id}</Text>
                  <Text style={styles.orderAmount}>{order.total}‚ÇΩ</Text>
                </View>

                <View style={styles.orderInfo}>
                  <Text style={styles.orderItems}>
                    üçï {order.items?.length || 0} –ø–æ–∑–∏—Ü–∏–∏
                  </Text>
                </View>

                <View style={styles.locationBlock}>
                  <Text style={styles.locationLabel}>üìç –ó–∞–±—Ä–∞—Ç—å:</Text>
                  <Text style={styles.locationText}>–î–≠–ù–î–ò (–ù–µ–º—á–∏–Ω–æ–≤–∫–∞)</Text>
                  <Text style={styles.locationDistance}>
                    üìè {order.restaurantDistance || '500–º'} ‚Ä¢ ‚è± {order.restaurantTime || '2 –º–∏–Ω'}
                  </Text>
                </View>

                <View style={styles.locationBlock}>
                  <Text style={styles.locationLabel}>üìç –î–æ—Å—Ç–∞–≤–∏—Ç—å:</Text>
                  <Text style={styles.locationText}>{order.address}</Text>
                  <Text style={styles.locationDistance}>
                    üìè {order.customerDistance || '3.5–∫–º'} ‚Ä¢ ‚è± {order.deliveryTime || '15 –º–∏–Ω'}
                  </Text>
                </View>

                <View style={styles.paymentBlock}>
                  <Text style={styles.paymentText}>
                    üíµ {order.paymentMethod === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : '–ö–∞—Ä—Ç–æ–π'}
                    {order.changeFrom && ` (—Å–¥–∞—á–∞ —Å ${order.changeFrom}‚ÇΩ)`}
                  </Text>
                </View>

                <View style={styles.orderActions}>
                  <TouchableOpacity
                    style={[styles.actionButton, styles.acceptButton]}
                    onPress={() => acceptOrder(order.id)}
                  >
                    <Text style={styles.actionButtonText}>‚úÖ –ü–†–ò–ù–Ø–¢–¨</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[styles.actionButton, styles.rejectButton]}
                    onPress={() => rejectOrder(order.id)}
                  >
                    <Text style={styles.actionButtonText}>‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨</Text>
                  </TouchableOpacity>
                </View>
              </View>
            ))}
          </View>
        )}

        {/* Active Orders */}
        {activeOrders.length > 0 && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Text style={styles.sectionTitle}>üìã –í —Ä–∞–±–æ—Ç–µ</Text>
              <View style={styles.badge}>
                <Text style={styles.badgeText}>{activeOrders.length}</Text>
              </View>
            </View>

            {activeOrders.map((order) => (
              <TouchableOpacity
                key={order.id}
                style={styles.activeOrderCard}
                onPress={() => navigation.navigate('OrderDetail', { orderId: order.id })}
              >
                <View style={styles.activeOrderHeader}>
                  <Text style={styles.activeOrderId}>üì¶ #{order.id}</Text>
                  <View
                    style={[
                      styles.statusBadge,
                      { backgroundColor: getStatusColor(order.status) },
                    ]}
                  >
                    <Text style={styles.statusBadgeText}>
                      {getStatusText(order.status)}
                    </Text>
                  </View>
                </View>
                <Text style={styles.activeOrderAddress}>{order.address}</Text>
                <Text style={styles.activeOrderDistance}>
                  üìè {order.distance} ‚Ä¢ ‚è± {order.estimatedTime}
                </Text>
                <View style={styles.activeOrderFooter}>
                  <Text style={styles.activeOrderAmount}>{order.total}‚ÇΩ</Text>
                  <Text style={styles.activeOrderAction}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí</Text>
                </View>
              </TouchableOpacity>
            ))}
          </View>
        )}

        {/* Empty State */}
        {newOrders.length === 0 && activeOrders.length === 0 && (
          <View style={styles.emptyState}>
            <Text style={styles.emptyIcon}>üì≠</Text>
            <Text style={styles.emptyTitle}>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</Text>
            <Text style={styles.emptyText}>
              {onShift
                ? '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å'
                : '–ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã'}
            </Text>
          </View>
        )}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    backgroundColor: '#0b5c3b',
    padding: 16,
    paddingTop: Platform.OS === 'ios' ? 50 : 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headerLeft: {
    flex: 1,
  },
  headerName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 4,
  },
  headerStats: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  headerStat: {
    fontSize: 14,
    color: '#fff',
    opacity: 0.9,
  },
  profileButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255,255,255,0.2)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  profileIcon: {
    fontSize: 20,
  },
  statsContainer: {
    flexDirection: 'row',
    padding: 16,
    gap: 12,
  },
  statCard: {
    flex: 1,
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#0b5c3b',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#6b7280',
  },
  shiftButton: {
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  shiftButtonActive: {
    backgroundColor: '#dc2626',
  },
  shiftButtonInactive: {
    backgroundColor: '#10b981',
  },
  shiftButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
  },
  scrollView: {
    flex: 1,
  },
  section: {
    padding: 16,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    gap: 8,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  badge: {
    backgroundColor: '#ef4444',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 10,
  },
  badgeText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  orderCard: {
    backgroundColor: '#fffbeb',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: '#fbbf24',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  orderHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  orderId: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  orderAmount: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#0b5c3b',
  },
  orderInfo: {
    marginBottom: 12,
  },
  orderItems: {
    fontSize: 14,
    color: '#6b7280',
  },
  locationBlock: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
  },
  locationLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: '#6b7280',
    marginBottom: 4,
  },
  locationText: {
    fontSize: 14,
    color: '#1f2937',
    marginBottom: 4,
  },
  locationDistance: {
    fontSize: 12,
    color: '#6b7280',
  },
  paymentBlock: {
    backgroundColor: '#dbeafe',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
  },
  paymentText: {
    fontSize: 14,
    color: '#1e40af',
    fontWeight: '600',
  },
  orderActions: {
    flexDirection: 'row',
    gap: 8,
  },
  actionButton: {
    flex: 1,
    padding: 14,
    borderRadius: 8,
    alignItems: 'center',
  },
  acceptButton: {
    backgroundColor: '#10b981',
  },
  rejectButton: {
    backgroundColor: '#6b7280',
  },
  actionButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  activeOrderCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  activeOrderHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  activeOrderId: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusBadgeText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  activeOrderAddress: {
    fontSize: 14,
    color: '#1f2937',
    marginBottom: 4,
  },
  activeOrderDistance: {
    fontSize: 12,
    color: '#6b7280',
    marginBottom: 12,
  },
  activeOrderFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  activeOrderAmount: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#0b5c3b',
  },
  activeOrderAction: {
    fontSize: 14,
    color: '#3b82f6',
    fontWeight: '600',
  },
  emptyState: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  emptyIcon: {
    fontSize: 64,
    marginBottom: 16,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 8,
  },
  emptyText: {
    fontSize: 14,
    color: '#6b7280',
    textAlign: 'center',
  },
});

export default HomeScreen;
