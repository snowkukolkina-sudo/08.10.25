/**
 * DANDY PIZZA - HTTPS –°–ï–†–í–ï–†
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å SSL/TLS —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
 */

const express = require('express');
const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');

const app = express();

// –ü–æ—Ä—Ç—ã
const HTTP_PORT = 3000;
const HTTPS_PORT = 3443;

// ===== MIDDLEWARE =====

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.tailwindcss.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "https://cdn.tailwindcss.com"],
            imgSrc: ["'self'", "data:", "https:", "http:"],
            connectSrc: ["'self'", "https:", "http:"],
            fontSrc: ["'self'", "data:"],
            objectSrc: ["'none'"],
            mediaSrc: ["'self'"],
            frameSrc: ["'none'"],
        },
    },
    hsts: {
        maxAge: 31536000,
        includeSubDomains: true,
        preload: true
    }
}));

// Rate limiting - –∑–∞—â–∏—Ç–∞ –æ—Ç DDoS
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});

app.use('/api/', limiter);

// CORS
app.use(cors({
    origin: ['http://localhost:3000', 'https://localhost:3443'],
    credentials: true
}));

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

// ===== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ =====

const publicPath = path.join(__dirname, '../../');
app.use(express.static(publicPath));

// ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====

const sqlite3 = require('sqlite3').verbose();
const dbPath = path.join(__dirname, '../dandy_pizza.db');
const db = new sqlite3.Database(dbPath);

console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞:', dbPath);

// ===== API ENDPOINTS =====

// –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        ssl: true,
        secure: req.secure
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
app.get('/api/orders', (req, res) => {
    db.all('SELECT * FROM orders ORDER BY created_at DESC', (err, orders) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        const promises = orders.map(order => {
            return new Promise((resolve) => {
                db.all('SELECT * FROM order_items WHERE order_id = ?', [order.id], (err, items) => {
                    order.items = items || [];
                    resolve(order);
                });
            });
        });

        Promise.all(promises).then(ordersWithItems => {
            res.json({ success: true, data: ordersWithItems });
        });
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
app.get('/api/orders/:id', (req, res) => {
    const orderId = req.params.id;
    
    db.get('SELECT * FROM orders WHERE id = ?', [orderId], (err, order) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        if (!order) {
            return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        db.all('SELECT * FROM order_items WHERE order_id = ?', [orderId], (err, items) => {
            order.items = items || [];
            res.json({ success: true, data: order });
        });
    });
});

// –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
app.post('/api/orders', (req, res) => {
    const order = req.body;
    const orderId = order.id || `ORD-${Date.now()}`;

    const sql = `INSERT INTO orders (id, customer_name, customer_phone, customer_email, 
                 address, apartment, delivery_type, payment_method, status, total, 
                 order_comment, created_at) 
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;

    const params = [
        orderId,
        order.customerName,
        order.customerPhone,
        order.customerEmail || null,
        order.address || null,
        order.apartment || null,
        order.deliveryType,
        order.paymentMethod,
        'pending',
        order.total,
        order.comment || null,
        new Date().toISOString()
    ];

    db.run(sql, params, function(err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        if (order.items && order.items.length > 0) {
            const itemSql = `INSERT INTO order_items (order_id, product_id, product_name, 
                            product_price, quantity, extras, total) 
                            VALUES (?, ?, ?, ?, ?, ?, ?)`;

            order.items.forEach(item => {
                db.run(itemSql, [
                    orderId,
                    item.id,
                    item.name,
                    item.price,
                    item.quantity || 1,
                    JSON.stringify(item.extras || []),
                    item.total || (item.price * (item.quantity || 1))
                ]);
            });
        }

        res.json({ 
            success: true, 
            data: { id: orderId } 
        });
    });
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
app.put('/api/orders/:id', (req, res) => {
    const orderId = req.params.id;
    const { status } = req.body;

    const sql = `UPDATE orders SET status = ?, updated_at = ? WHERE id = ?`;

    db.run(sql, [status, new Date().toISOString(), orderId], function(err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }

        res.json({ success: true, message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω' });
    });
});

// ===== –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï HTTP -> HTTPS =====

const httpApp = express();
httpApp.use((req, res) => {
    res.redirect(301, `https://${req.headers.host.replace(':3000', ':3443')}${req.url}`);
});

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–û–í =====

// HTTP —Å–µ—Ä–≤–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
const httpServer = http.createServer(httpApp);

// HTTPS —Å–µ—Ä–≤–µ—Ä
let httpsServer;

try {
    // –ü—É—Ç–∏ –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
    const sslKeyPath = path.join(__dirname, '../ssl/server.key');
    const sslCertPath = path.join(__dirname, '../ssl/server.cert');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if (!fs.existsSync(sslKeyPath) || !fs.existsSync(sslCertPath)) {
        console.log('\n‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        console.log('üìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node generate-ssl-cert.js');
        console.log('\nüîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä...\n');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ HTTP
        const simpleHttpServer = http.createServer(app);
        simpleHttpServer.listen(HTTP_PORT, () => {
            console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${HTTP_PORT}`);
            console.log(`üìù –î–ª—è HTTPS —Å–æ–∑–¥–∞–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!`);
        });
    } else {
        // SSL –æ–ø—Ü–∏–∏
        const sslOptions = {
            key: fs.readFileSync(sslKeyPath),
            cert: fs.readFileSync(sslCertPath)
        };

        // –°–æ–∑–¥–∞—ë–º HTTPS —Å–µ—Ä–≤–µ—Ä
        httpsServer = https.createServer(sslOptions, app);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–µ—Ä–≤–µ—Ä–∞
        httpServer.listen(HTTP_PORT, () => {
            console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä (redirect): http://localhost:${HTTP_PORT}`);
        });

        httpsServer.listen(HTTPS_PORT, () => {
            console.log(`üîê HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: https://localhost:${HTTPS_PORT}`);
            console.log(`‚úÖ SSL/TLS —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ`);
            console.log(`\nüì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:`);
            console.log(`   - –ê–¥–º–∏–Ω–∫–∞: https://localhost:${HTTPS_PORT}/admin.html`);
            console.log(`   - POS:     https://localhost:${HTTPS_PORT}/pos.html`);
            console.log(`   - –°–∞–π—Ç:    https://localhost:${HTTPS_PORT}/index.html`);
            console.log(`\n‚ö†Ô∏è  –ë—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)`);
            console.log(`   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!`);
        });
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞:', error);
    console.log('\nüîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä...\n');
    
    const simpleHttpServer = http.createServer(app);
    simpleHttpServer.listen(HTTP_PORT, () => {
        console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${HTTP_PORT}`);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
});

process.on('unhandledRejection', (err) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π reject:', err);
});
