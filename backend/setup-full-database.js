const knex = require('knex');
const path = require('path');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è SQLite (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const config = {
  client: 'sqlite3',
  connection: {
    filename: path.join(__dirname, 'dandy_pizza_full.db')
  },
  useNullAsDefault: true,
  migrations: {
    directory: path.join(__dirname, 'database/migrations')
  },
  seeds: {
    directory: path.join(__dirname, 'database/seeds')
  }
};

async function setupDatabase() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö DANDY Pizza...\n');
  
  const db = knex(config);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await db.raw('SELECT 1');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è UUID (–¥–ª—è SQLite)
    await db.raw(`
      CREATE TABLE IF NOT EXISTS _temp_check (id TEXT);
    `);
    await db.raw(`DROP TABLE IF EXISTS _temp_check;`);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏—è–º');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\nüì¶ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');
    const [batchNo, migrations] = await db.migrate.latest();
    
    if (migrations.length === 0) {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞');
    } else {
      console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${migrations.length}`);
      migrations.forEach(migration => {
        console.log(`   - ${migration}`);
      });
    }
    
    // –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    console.log('\nüå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await seedDatabase(db);
    
    console.log('\n' + '='.repeat(60));
    console.log('üéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù–ê!');
    console.log('='.repeat(60));
    console.log(`\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:`);
    console.log(`   ‚úÖ users - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏`);
    console.log(`   ‚úÖ categories - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   ‚úÖ products - –¢–æ–≤–∞—Ä—ã`);
    console.log(`   ‚úÖ orders - –ó–∞–∫–∞–∑—ã`);
    console.log(`   ‚úÖ order_items - –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤`);
    console.log(`   ‚úÖ payments - –ü–ª–∞—Ç–µ–∂–∏`);
    console.log(`   ‚úÖ fiscal_receipts - –§–∏—Å–∫–∞–ª—å–Ω—ã–µ —á–µ–∫–∏`);
    console.log(`   ‚úÖ delivery_zones - –ó–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏`);
    console.log(`   ‚úÖ audit_logs - –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞`);
    console.log(`   ‚úÖ warehouses - –°–∫–ª–∞–¥—ã`);
    console.log(`   ‚úÖ warehouse_inventory - –¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ (FEFO)`);
    console.log(`   ‚úÖ warehouse_operations - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞`);
    console.log(`   ‚úÖ expiry_alerts - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–æ–∫–∞—Ö`);
    console.log(`   ‚úÖ couriers - –ö—É—Ä—å–µ—Ä—ã`);
    console.log(`   ‚úÖ courier_assignments - –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞–º`);
    console.log(`   ‚úÖ courier_locations - GPS —Ç—Ä–µ–∫–∏–Ω–≥`);
    console.log(`   ‚úÖ courier_zones - –ó–æ–Ω—ã –∫—É—Ä—å–µ—Ä–æ–≤`);
    console.log(`   ‚úÖ courier_ratings - –†–µ–π—Ç–∏–Ω–≥–∏ –∫—É—Ä—å–µ—Ä–æ–≤`);
    console.log(`   ‚úÖ egais_documents - –ï–ì–ê–ò–°`);
    console.log(`   ‚úÖ mercury_documents - –ú–µ—Ä–∫—É—Ä–∏–π`);
    console.log(`   ‚úÖ honest_sign_marks - –ß–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫`);
    console.log(`   ‚úÖ edo_documents - –≠–î–û`);
    console.log(`   ‚úÖ erp_sync_log - 1–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è`);
    console.log(`   ‚úÖ aggregator_orders - –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã`);
    console.log(`   ‚úÖ kds_orders - KDS (Kitchen Display)`);
    console.log(`   ‚úÖ reports - –û—Ç—á—ë—Ç—ã`);
    console.log(`   ‚úÖ scheduled_reports - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á—ë—Ç–æ–≤`);
    console.log(`   ‚úÖ daily_summaries - Z-–æ—Ç—á—ë—Ç—ã`);
    
    console.log(`\nüìÑ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: dandy_pizza_full.db`);
    console.log(`üìè –†–∞–∑–º–µ—Ä: ${getFileSize(config.connection.filename)}`);
    console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n`);
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error(error);
    process.exit(1);
  } finally {
    await db.destroy();
  }
}

async function seedDatabase(db) {
  // –°–æ–∑–¥–∞—ë–º UUID —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è SQLite
  const uuid = () => {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  };
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  const adminId = uuid();
  await db('users').insert([
    {
      id: adminId,
      username: 'admin',
      email: 'admin@dandy.ru',
      password_hash: '$2b$10$abcdefghijklmnopqrstuv', // –•—ç—à –¥–ª—è 'admin123'
      first_name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      last_name: '–°–∏—Å—Ç–µ–º—ã',
      role: 'admin',
      status: 'active',
      phone: '+79991234567'
    }
  ]);
  console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (admin / admin123)');
  
  // –°–∫–ª–∞–¥—ã
  const warehouseId = uuid();
  await db('warehouses').insert([
    {
      id: warehouseId,
      name: '–ì–ª–∞–≤–Ω—ã–π —Å–∫–ª–∞–¥',
      code: 'MAIN001',
      address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, –¥. 1',
      type: 'main',
      is_active: true
    }
  ]);
  console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫–ª–∞–¥');
  
  // –ö—É—Ä—å–µ—Ä—ã
  await db('couriers').insert([
    {
      id: uuid(),
      first_name: '–ò–≤–∞–Ω',
      last_name: '–ö—É—Ä—å–µ—Ä–æ–≤',
      phone: '+79991111111',
      transport_type: 'car',
      transport_number: '–ê123–ë–í777',
      status: 'available',
      is_active: true
    },
    {
      id: uuid(),
      first_name: '–ü—ë—Ç—Ä',
      last_name: '–î–æ—Å—Ç–∞–≤–∫–∏–Ω',
      phone: '+79992222222',
      transport_type: 'bike',
      status: 'available',
      is_active: true
    }
  ]);
  console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω—ã –∫—É—Ä—å–µ—Ä—ã');
  
  // –û—Ç—á—ë—Ç—ã (–ø—Ä–∏–º–µ—Ä)
  await db('daily_summaries').insert([
    {
      id: uuid(),
      business_date: new Date().toISOString().split('T')[0],
      total_sales: 0,
      orders_count: 0,
      is_finalized: false
    }
  ]);
  console.log('   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç—á—ë—Ç—ã');
}

function getFileSize(filepath) {
  try {
    const stats = fs.statSync(filepath);
    const fileSizeInBytes = stats.size;
    const fileSizeInKB = (fileSizeInBytes / 1024).toFixed(2);
    return `${fileSizeInKB} KB`;
  } catch (error) {
    return 'N/A';
  }
}

// –ó–∞–ø—É—Å–∫
setupDatabase()
  .then(() => {
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω\n');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
