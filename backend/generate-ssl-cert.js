/**
 * –ì–ï–ù–ï–†–ê–¶–ò–Ø SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò
 * –°–æ–∑–¥–∞—ë—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è HTTPS
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

const sslDir = path.join(__dirname, 'ssl');

console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');

// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ssl –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(sslDir)) {
    fs.mkdirSync(sslDir);
    console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ssl —Å–æ–∑–¥–∞–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenSSL
exec('openssl version', (error, stdout) => {
    if (error) {
        console.log('\n‚ùå OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        console.log('\nüì• –î–ª—è Windows —Å–∫–∞—á–∞–π—Ç–µ: https://slproweb.com/products/Win32OpenSSL.html');
        console.log('\nüìù –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Node.js –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä...');
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π selfsigned –ø–∞–∫–µ—Ç
        generateWithNode();
    } else {
        console.log(`‚úÖ OpenSSL –Ω–∞–π–¥–µ–Ω: ${stdout.trim()}`);
        generateWithOpenSSL();
    }
});

function generateWithOpenSSL() {
    const keyPath = path.join(sslDir, 'server.key');
    const certPath = path.join(sslDir, 'server.cert');

    const command = `openssl req -x509 -newkey rsa:2048 -keyout "${keyPath}" -out "${certPath}" -days 365 -nodes -subj "/C=RU/ST=Moscow/L=Moscow/O=DANDY Pizza/OU=IT/CN=localhost"`;

    exec(command, (error) => {
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
            console.log('\nüìù –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
            generateWithNode();
        } else {
            console.log('\n‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
            console.log(`üìÑ –ö–ª—é—á: ${keyPath}`);
            console.log(`üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${certPath}`);
            console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å HTTPS —Å–µ—Ä–≤–µ—Ä!');
        }
    });
}

function generateWithNode() {
    console.log('\nüì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
    
    exec('npm install selfsigned --save-dev', (error) => {
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞:', error);
            return;
        }

        console.log('‚úÖ –ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        const selfsigned = require('selfsigned');
        const attrs = [
            { name: 'commonName', value: 'localhost' },
            { name: 'countryName', value: 'RU' },
            { name: 'stateOrProvinceName', value: 'Moscow' },
            { name: 'localityName', value: 'Moscow' },
            { name: 'organizationName', value: 'DANDY Pizza' }
        ];

        const pems = selfsigned.generate(attrs, { 
            days: 365,
            keySize: 2048,
            algorithm: 'sha256'
        });

        const keyPath = path.join(sslDir, 'server.key');
        const certPath = path.join(sslDir, 'server.cert');

        fs.writeFileSync(keyPath, pems.private);
        fs.writeFileSync(certPath, pems.cert);

        console.log('\n‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìÑ –ö–ª—é—á: ${keyPath}`);
        console.log(`üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${certPath}`);
        console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å HTTPS —Å–µ—Ä–≤–µ—Ä!');
    });
}
