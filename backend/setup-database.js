/**
 * –ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ë–î –î–õ–Ø DANDY PIZZA
 * –°–æ–∑–¥–∞—ë—Ç SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// –ü—É—Ç—å –∫ –ë–î
const dbPath = path.join(__dirname, 'dandy_pizza.db');

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
console.log('üìÅ –ü—É—Ç—å –∫ –ë–î:', dbPath);

// –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
        process.exit(1);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SQLite');
});

// SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
const createTableSQL = `
-- 1. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role TEXT NOT NULL,
    name TEXT,
    email TEXT,
    phone TEXT,
    is_active INTEGER DEFAULT 1,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    last_login TEXT
);

-- 2. –ö–ê–¢–ï–ì–û–†–ò–ò
CREATE TABLE IF NOT EXISTS categories (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    name_en TEXT,
    sort_order INTEGER DEFAULT 0,
    is_active INTEGER DEFAULT 1,
    icon TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);

-- 3. –¢–û–í–ê–†–´
CREATE TABLE IF NOT EXISTS products (
    id TEXT PRIMARY KEY,
    category_id TEXT NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    price REAL NOT NULL,
    vat INTEGER DEFAULT 20,
    photo TEXT,
    is_active INTEGER DEFAULT 1,
    stock INTEGER DEFAULT 0,
    unit TEXT DEFAULT '—à—Ç',
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(id)
);

-- 4. –ó–ê–ö–ê–ó–´
CREATE TABLE IF NOT EXISTS orders (
    id TEXT PRIMARY KEY,
    customer_name TEXT NOT NULL,
    customer_phone TEXT NOT NULL,
    customer_email TEXT,
    address TEXT,
    apartment TEXT,
    entrance TEXT,
    floor TEXT,
    intercom TEXT,
    address_comment TEXT,
    order_comment TEXT,
    delivery_type TEXT NOT NULL,
    payment_method TEXT NOT NULL,
    status TEXT DEFAULT 'pending',
    total REAL NOT NULL,
    delivery_cost REAL DEFAULT 0,
    discount REAL DEFAULT 0,
    promo_code TEXT,
    fiscal_document TEXT,
    receipt_number TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
);

-- 5. –ü–û–ó–ò–¶–ò–ò –ó–ê–ö–ê–ó–ê
CREATE TABLE IF NOT EXISTS order_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id TEXT NOT NULL,
    product_id TEXT NOT NULL,
    product_name TEXT NOT NULL,
    product_price REAL NOT NULL,
    quantity INTEGER DEFAULT 1,
    extras TEXT,
    total REAL NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- 6. –°–ú–ï–ù–´
CREATE TABLE IF NOT EXISTS shifts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    shift_number INTEGER NOT NULL,
    cashier_name TEXT NOT NULL,
    cashier_id TEXT NOT NULL,
    opened_at TEXT NOT NULL,
    closed_at TEXT,
    receipts_count INTEGER DEFAULT 0,
    total_cash REAL DEFAULT 0,
    total_card REAL DEFAULT 0,
    total_sbp REAL DEFAULT 0,
    fiscal_document TEXT,
    status TEXT DEFAULT 'open',
    FOREIGN KEY (cashier_id) REFERENCES users(id)
);

-- 7. –§–ò–°–ö–ê–õ–¨–ù–´–ï –ß–ï–ö–ò
CREATE TABLE IF NOT EXISTS fiscal_receipts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id TEXT NOT NULL,
    shift_id INTEGER NOT NULL,
    receipt_number INTEGER NOT NULL,
    fiscal_document TEXT NOT NULL,
    fiscal_sign TEXT NOT NULL,
    fiscal_datetime TEXT NOT NULL,
    qr_code TEXT,
    amount REAL NOT NULL,
    payment_type TEXT NOT NULL,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (shift_id) REFERENCES shifts(id)
);

-- 8. –°–ö–õ–ê–î
CREATE TABLE IF NOT EXISTS warehouse (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id TEXT NOT NULL,
    product_name TEXT NOT NULL,
    quantity REAL NOT NULL,
    unit TEXT NOT NULL,
    min_quantity REAL DEFAULT 0,
    expiry_date TEXT,
    supplier TEXT,
    purchase_price REAL,
    batch_number TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- 9. –ö–£–†–¨–ï–†–´
CREATE TABLE IF NOT EXISTS couriers (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    phone TEXT NOT NULL,
    email TEXT,
    rating REAL DEFAULT 5.0,
    status TEXT DEFAULT 'offline',
    latitude REAL,
    longitude REAL,
    last_location_update TEXT,
    orders_completed INTEGER DEFAULT 0,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);

-- 10. –ö–õ–ò–ï–ù–¢–´ (–¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏)
CREATE TABLE IF NOT EXISTS customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phone TEXT UNIQUE NOT NULL,
    name TEXT,
    email TEXT,
    birthday TEXT,
    bonuses INTEGER DEFAULT 0,
    total_orders INTEGER DEFAULT 0,
    total_spent REAL DEFAULT 0,
    level TEXT DEFAULT '–ù–æ–≤–∏—á–æ–∫',
    discount REAL DEFAULT 0,
    referral_code TEXT UNIQUE,
    referred_by TEXT,
    registered_at TEXT DEFAULT CURRENT_TIMESTAMP
);

-- 11. –ü–†–û–ú–û–ö–û–î–´
CREATE TABLE IF NOT EXISTS promo_codes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code TEXT UNIQUE NOT NULL,
    discount_type TEXT NOT NULL,
    discount_value REAL NOT NULL,
    min_order_amount REAL DEFAULT 0,
    max_uses INTEGER,
    used_count INTEGER DEFAULT 0,
    valid_from TEXT,
    valid_until TEXT,
    is_active INTEGER DEFAULT 1,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);
`;

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
function createTables() {
    return new Promise((resolve, reject) => {
        db.exec(createTableSQL, (err) => {
            if (err) {
                reject(err);
            } else {
                resolve();
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function insertTestData() {
    return new Promise((resolve, reject) => {
        const testDataSQL = `
        -- –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω
        INSERT OR IGNORE INTO users (id, username, password, role, name, email, phone)
        VALUES ('admin_1', 'admin', 'admin123', 'admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin@dandy.ru', '+7 (999) 123-45-67');

        -- –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞—Å—Å–∏—Ä
        INSERT OR IGNORE INTO users (id, username, password, role, name)
        VALUES ('cashier_1', 'cashier1', 'cashier123', 'cashier', '–ö–∞—Å—Å–∏—Ä –ò–≤–∞–Ω');

        -- –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        INSERT OR IGNORE INTO categories (id, name, name_en, sort_order)
        VALUES 
            ('pizza', '–ü–∏—Ü—Ü–∞', 'Pizza', 1),
            ('rolls', '–†–æ–ª–ª—ã', 'Rolls', 2),
            ('drinks', '–ù–∞–ø–∏—Ç–∫–∏', 'Drinks', 3),
            ('desserts', '–î–µ—Å–µ—Ä—Ç—ã', 'Desserts', 4);

        -- –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        INSERT OR IGNORE INTO products (id, category_id, name, price, photo)
        VALUES 
            ('pizza-margarita', 'pizza', '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 399, '/assets/pizza.jpg'),
            ('pizza-pepperoni', 'pizza', '–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏', 499, '/assets/pizza.jpg'),
            ('roll-philadelphia', 'rolls', '–†–æ–ª–ª –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', 450, '/assets/roll.jpg'),
            ('roll-california', 'rolls', '–†–æ–ª–ª –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', 420, '/assets/roll.jpg');

        -- –¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—å–µ—Ä
        INSERT OR IGNORE INTO couriers (id, name, phone, rating)
        VALUES 
            ('courier_1', '–ê–ª–µ–∫—Å–µ–π', '+7 (999) 111-11-11', 4.8),
            ('courier_2', '–î–º–∏—Ç—Ä–∏–π', '+7 (999) 222-22-22', 4.9);
        `;

        db.exec(testDataSQL, (err) => {
            if (err) {
                reject(err);
            } else {
                resolve();
            }
        });
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function setup() {
    try {
        console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
        await createTables();
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

        console.log('\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await insertTestData();
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

        console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìã –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: 11');
        console.log('   - users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)');
        console.log('   - categories (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)');
        console.log('   - products (—Ç–æ–≤–∞—Ä—ã)');
        console.log('   - orders (–∑–∞–∫–∞–∑—ã)');
        console.log('   - order_items (–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞)');
        console.log('   - shifts (—Å–º–µ–Ω—ã)');
        console.log('   - fiscal_receipts (—á–µ–∫–∏)');
        console.log('   - warehouse (—Å–∫–ª–∞–¥)');
        console.log('   - couriers (–∫—É—Ä—å–µ—Ä—ã)');
        console.log('   - customers (–∫–ª–∏–µ–Ω—Ç—ã/–ª–æ—è–ª—å–Ω–æ—Å—Ç—å)');
        console.log('   - promo_codes (–ø—Ä–æ–º–æ–∫–æ–¥—ã)');

        console.log('\nüë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
        console.log('   –ê–¥–º–∏–Ω: admin / admin123');
        console.log('   –ö–∞—Å—Å–∏—Ä: cashier1 / cashier123');

        console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä!');
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î:', error);
    } finally {
        db.close();
    }
}

// –ó–∞–ø—É—Å–∫
setup();
