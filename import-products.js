// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ "—Ä–æ–ª–ª—ã –ø–∏—Ü—Ü—ã" –Ω–∞ —Å–∞–π—Ç
const fs = require('fs');
const path = require('path');

const SOURCE_DIR = '—Ä–æ–ª–ª—ã –ø–∏—Ü—Ü—ã';
const TARGET_DIR = 'assets/products';
const OUTPUT_JSON = 'products-data.json';

// –ù–∞–∑–≤–∞–Ω–∏—è –ø–∏—Ü—Ü (–≤—Å–µ —á—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–∏—Ü—Ü–∞)
const PIZZA_NAMES = [
  '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ø–µ–ø–ø–µ—Ä–æ–Ω–∏', '–∫–∞—Ä–±–æ–Ω–∞—Ä–∞', '–≥–∞–≤–∞–π—Å–∫–∞—è', '—á–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞', '–±–∞–≤–∞—Ä—Å–∫–∞—è',
  '–≥—Ä–∏–±–Ω–∞—è', '—Ç–µ—Ä–∏—è–∫–∏', '–±–∞—Ä–±–µ–∫—é', '—Ö–∞–ª—è–ª—å', '—Ö–∞–Ω—Ç–µ—Ä', '—á–µ–ª–µ–Ω—Ç–∞–Ω–æ', '–±–µ–ª–ª—É—á–∏',
  '–±–æ–ª–æ–Ω—å–µ–∑–µ', '–≤–æ—Å—Ç–æ—á–Ω–∞—è', '–¥–∂–µ—Å—Å–∏–∫–∞', '–¥–∂–æ–≤–∞–Ω–Ω–∏', '–¥—å—è–≤–æ–ª–∏—Ç–∞', '–∫–∞–±–∞–Ω—á–∏–∫',
  '–∫–æ–∑–∞ –Ω–æ—Å—Ç—Ä–∞', '–ø–∞–ø–∞–π', '–ø–æ—Ä—Ç–æ—Ñ–∏–Ω–æ', '—Å–∞–ª—å–º–æ–Ω–µ', '—Å—É–ø–µ—Ä –º–∞—Ä–∏–æ', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
  '—Ñ–ª–æ—Ä–µ–Ω—Ç–∏–Ω–∏', '—Ñ–æ–∫–∞—á—á–∞', '–ø—Ä–∏–Ω—Ü–µ—Å—Å–∞', '—Å–ª–∏–≤–æ—á–Ω–∞—è', '–∞–ª–∏', '–±–µ–ª–ª–∞', '–≥–æ—Ä—è—á–∏–π',
  '–≥—Ä–∏–Ω –º—É–Ω', '—Å —Ç—É–Ω—Ü–æ–º', '—Ü–µ–∑–∞—Ä—å', '—á–µ—Ç—Ä–∏–æ–ª–æ', '—á–∏–∫–µ–Ω'
];

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
const CATEGORIES = {
  '–ø–∏—Ü—Ü–∞': '–ü–∏—Ü—Ü–∞',
  '—Ä–æ–ª–ª': '–†–æ–ª–ª—ã',
  '—Å–µ—Ç': '–°–µ—Ç—ã',
  '—Å–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç—ã',
  '–ø–æ–∫–µ': '–ü–æ–∫–µ',
  '—Å—ç–Ω–¥–≤–∏—á': '–°—ç–Ω–¥–≤–∏—á–∏',
  '—Ü–µ–∑–∞—Ä—å': '–°–∞–ª–∞—Ç—ã',
  '—Ç–æ–º —è–º': '–°—É–ø—ã',
  '—Å–æ—É—Å': '–°–æ—É—Å—ã',
  '–Ω–∞–ø–∏—Ç–æ–∫': '–ù–∞–ø–∏—Ç–∫–∏',
  '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': '–ó–∞–∫—É—Å–∫–∏',
  '–∫–∞—Ä—Ç–æ—à–∫–∞': '–ó–∞–∫—É—Å–∫–∏',
  '–∫—Ä—ã–ª—å—è': '–ó–∞–∫—É—Å–∫–∏',
  '–∫—Ä—ã–ª–±—å—è': '–ó–∞–∫—É—Å–∫–∏',
  '–Ω–∞–≥–µ—Ç—Å': '–ó–∞–∫—É—Å–∫–∏',
  '—Å—Ç—Ä–∏–ø—Å': '–ó–∞–∫—É—Å–∫–∏',
  '–∫–æ–ª—å—Ü–∞': '–ó–∞–∫—É—Å–∫–∏',
  '–ø–∞–ª–æ—á–∫–∏': '–ó–∞–∫—É—Å–∫–∏',
  '—Ç–µ–º–ø—É—Ä–∞': '–†–æ–ª–ª—ã',
  '—É–Ω–∞–≥–∏': '–†–æ–ª–ª—ã',
  '–±–æ–Ω–∏—Ç–æ': '–†–æ–ª–ª—ã',
  '—Å—è–∫–µ': '–†–æ–ª–ª—ã',
  '–º–∞–≥—É—Ä–æ': '–†–æ–ª–ª—ã',
  '—ç–±–∏': '–†–æ–ª–ª—ã',
  '–Ω–∏–Ω–¥–∑—è': '–†–æ–ª–ª—ã',
  '–∫—Ä–∞–±': '–†–æ–ª–ª—ã',
  '–¥—Ä–∏–º': '–†–æ–ª–ª—ã',
};

// –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const PRICE_RANGES = {
  '–ü–∏—Ü—Ü–∞': { min: 450, max: 890 },
  '–†–æ–ª–ª—ã': { min: 280, max: 580 },
  '–°–µ—Ç—ã': { min: 890, max: 1590 },
  '–°–∞–ª–∞—Ç—ã': { min: 280, max: 480 },
  '–ü–æ–∫–µ': { min: 380, max: 580 },
  '–°—ç–Ω–¥–≤–∏—á–∏': { min: 280, max: 380 },
  '–°—É–ø—ã': { min: 380, max: 480 },
  '–°–æ—É—Å—ã': { min: 50, max: 80 },
  '–ù–∞–ø–∏—Ç–∫–∏': { min: 120, max: 280 },
  '–ó–∞–∫—É—Å–∫–∏': { min: 180, max: 380 },
};

function cleanFileName(filename) {
  // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Ü–∏—Ñ—Ä—ã –≤ —Å–∫–æ–±–∫–∞—Ö
  return filename
    .replace(/\.(jpg|jpeg|png|webp)$/i, '')
    .replace(/\s*\(\d+\)\s*/g, '')
    .replace(/\s+/g, ' ')
    .trim();
}

function detectCategory(filename) {
  const lower = filename.toLowerCase();
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  for (const [keyword, category] of Object.entries(CATEGORIES)) {
    if (lower.includes(keyword)) {
      return category;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∏—Ü—Ü
  for (const pizzaName of PIZZA_NAMES) {
    if (lower.includes(pizzaName)) {
      return '–ü–∏—Ü—Ü–∞';
    }
  }
  
  return '–î—Ä—É–≥–æ–µ';
}

function generatePrice(category) {
  const range = PRICE_RANGES[category] || { min: 200, max: 500 };
  const price = Math.floor(Math.random() * (range.max - range.min + 1)) + range.min;
  // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 9 (–∫—Ä–∞—Å–∏–≤–∞—è —Ü–µ–Ω–∞)
  return Math.floor(price / 10) * 10 - 1;
}

function copyFiles(sourceDir, targetDir, relativePath = '') {
  const products = [];
  const fullSourcePath = path.join(sourceDir, relativePath);
  
  if (!fs.existsSync(fullSourcePath)) {
    console.log(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${fullSourcePath}`);
    return products;
  }

  const items = fs.readdirSync(fullSourcePath);
  
  for (const item of items) {
    const sourcePath = path.join(fullSourcePath, item);
    const stat = fs.statSync(sourcePath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É –ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã (—Ç–∞–º —Ç–æ–ª—å–∫–æ —Å—ã—Ä—å–µ)
      if (item === '–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã') continue;
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      const subProducts = copyFiles(sourceDir, targetDir, path.join(relativePath, item));
      products.push(...subProducts);
    } else if (stat.isFile()) {
      const ext = path.extname(item).toLowerCase();
      
      // –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (['.jpg', '.jpeg', '.png', '.webp'].includes(ext)) {
        const cleanName = cleanFileName(item);
        const category = detectCategory(cleanName);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (cleanName.length < 3 || cleanName.match(/^\d+$/)) continue;
        
        // –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        const newFileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}${ext}`;
        const targetPath = path.join(targetDir, newFileName);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        try {
          fs.copyFileSync(sourcePath, targetPath);
          
          const product = {
            id: `prod-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            name: cleanName,
            category: category,
            price: generatePrice(category),
            image: `assets/products/${newFileName}`,
            description: `${cleanName} - –≤–∫—É—Å–Ω—ã–π –∏ —Å–≤–µ–∂–∏–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç DANDY Pizza`,
            weight: category === '–ü–∏—Ü—Ü–∞' ? '550–≥' : category === '–†–æ–ª–ª—ã' ? '280–≥' : '',
            available: true
          };
          
          products.push(product);
          console.log(`‚úÖ ${cleanName} ‚Üí ${category} (${product.price}‚ÇΩ)`);
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${item}:`, err.message);
        }
      }
    }
  }
  
  return products;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–æ–≤...\n');
  
  // –°–æ–∑–¥–∞—ë–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (!fs.existsSync(TARGET_DIR)) {
    fs.mkdirSync(TARGET_DIR, { recursive: true });
  }
  
  // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
  const products = copyFiles(SOURCE_DIR, TARGET_DIR);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
  fs.writeFileSync(OUTPUT_JSON, JSON.stringify(products, null, 2), 'utf-8');
  
  console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ!`);
  console.log(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
  console.log(`üìÅ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${TARGET_DIR}`);
  console.log(`üìÑ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${OUTPUT_JSON}`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const stats = {};
  products.forEach(p => {
    stats[p.category] = (stats[p.category] || 0) + 1;
  });
  
  console.log('\nüìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
  Object.entries(stats).sort((a, b) => b[1] - a[1]).forEach(([cat, count]) => {
    console.log(`   ${cat}: ${count} —à—Ç.`);
  });
}

main();
