/**
 * DANDY Inventory System ‚Äî –¢–æ–≤–∞—Ä–æ—É—á—ë—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
 * Version: 1.0.0
 * Date: 30.09.2025
 */

class DandyInventorySystem {
    constructor() {
        this.currentPage = 'dashboard';
        this.currentUser = null;
        
        // –î–∞–Ω–Ω—ã–µ (–¥–µ–º–æ)
        this.products = this.loadProducts();
        this.recipes = this.loadRecipes();
        this.warehouses = this.loadWarehouses();
        this.stockBalances = this.loadStockBalances();
        this.documents = [];
        this.egaisOperations = [];
        this.crptCodes = [];
        this.mercuryVSD = [];
        
        this.init();
    }
    
    init() {
        console.log('üéØ DANDY Inventory System initializing...');
        this.setupEventListeners();
        this.loadDashboardData();
        
        // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ!
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∞–∂–º—ë—Ç –∫–Ω–æ–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        
        console.log('‚úÖ System ready');
    }
    
    setupEventListeners() {
        // Navigation
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                const page = e.target.dataset.page;
                this.switchPage(page);
            });
        });
    }
    
    switchPage(page) {
        console.log(`üîÄ Switching to page: ${page}`);
        this.currentPage = page;
        
        // Update tabs
        document.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });
        const activeTab = document.querySelector(`[data-page="${page}"]`);
        if (activeTab) {
            activeTab.classList.add('active');
            console.log(`‚úÖ Tab activated: ${page}`);
        } else {
            console.error(`‚ùå Tab not found for: ${page}`);
        }
        
        // Update content
        document.querySelectorAll('.page-content').forEach(content => {
            content.classList.remove('active');
        });
        const activePage = document.getElementById(page);
        if (activePage) {
            activePage.classList.add('active');
            console.log(`‚úÖ Page content shown: ${page}`);
        } else {
            console.error(`‚ùå Page content not found: ${page}`);
        }
        
        // Load page data
        this.loadPageData(page);
    }
    
    loadPageData(page) {
        console.log(`üìÑ Loading page: ${page}`);
        
        switch(page) {
            case 'dashboard':
                this.loadDashboardData();
                break;
            case 'nomenclature':
                this.loadNomenclatureData();
                if (window.nomenclatureModule) {
                    nomenclatureModule.init();
                }
                break;
            case 'recipes':
                this.loadRecipesData();
                if (window.recipesModule) {
                    recipesModule.init();
                }
                break;
            case 'warehouse':
                this.loadWarehouseData();
                if (window.warehouseModule) {
                    warehouseModule.init();
                }
                break;
            case 'production':
                this.loadProductionData();
                break;
            case 'bar':
                this.loadBarData();
                if (window.barModule) {
                    barModule.init();
                }
                break;
            case 'inventory':
                this.loadInventoryData();
                break;
            case 'egais-module':
                this.loadEGAISData();
                break;
            case 'crpt':
                this.loadCRPTData();
                break;
            case 'mercury':
                this.loadMercuryData();
                break;
            case 'integrations':
                this.loadIntegrationsData();
                break;
            case 'reports':
                this.loadReportsData();
                break;
            case 'settings':
                this.loadSettingsData();
                break;
        }
    }
    
    // ===== Data Loaders =====
    
    loadProducts() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º LocalStorage - –º–æ–∂–µ—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        const saved = this.loadFromLocalStorage('products');
        if (saved && saved.length > 50) {
            console.log('üì¶ Loaded products from LocalStorage:', saved.length);
            return saved;
        }
        
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã + —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é
        return [
            // ========== –†–´–ë–ê –ò –ú–û–†–ï–ü–†–û–î–£–ö–¢–´ ==========
            { id: 1, code: 'ING-001', name: '–õ–æ—Å–æ—Å—å —Ñ–∏–ª–µ', type: 'ingredient', category: '–†—ã–±–∞/–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 5.0, currentStock: 0.8, price: 1200 },
            { id: 2, code: 'ING-002', name: '–¢—É–Ω–µ—Ü —Å—Ç–µ–π–∫', type: 'ingredient', category: '–†—ã–±–∞/–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 3.0, currentStock: 2.5, price: 1500 },
            { id: 3, code: 'ING-003', name: '–ö—Ä–µ–≤–µ—Ç–∫–∏ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ', type: 'ingredient', category: '–†—ã–±–∞/–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 2.0, currentStock: 1.2, price: 1800 },
            { id: 4, code: 'ING-004', name: '–ú–∏–¥–∏–∏ –≤ —Å—Ç–≤–æ—Ä–∫–∞—Ö', type: 'ingredient', category: '–†—ã–±–∞/–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 5.0, currentStock: 3.8, price: 650 },
            { id: 5, code: 'ING-005', name: '–ö–∞–ª—å–º–∞—Ä —Ç—É—à–∫–∞', type: 'ingredient', category: '–†—ã–±–∞/–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 3.0, currentStock: 2.1, price: 550 },
            
            // ========== –ú–Ø–°–û –ò –ü–¢–ò–¶–ê ==========
            { id: 10, code: 'ING-010', name: '–ì–æ–≤—è–¥–∏–Ω–∞ –≤—ã—Ä–µ–∑–∫–∞', type: 'ingredient', category: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞', baseUnit: '–∫–≥', isAlcohol: false, minStock: 10.0, currentStock: 8.5, price: 800 },
            { id: 11, code: 'ING-011', name: '–°–≤–∏–Ω–∏–Ω–∞ –∫–æ—Ä–µ–π–∫–∞', type: 'ingredient', category: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞', baseUnit: '–∫–≥', isAlcohol: false, minStock: 8.0, currentStock: 6.3, price: 450 },
            { id: 12, code: 'ING-012', name: '–ö—É—Ä–∏—Ü–∞ —Ñ–∏–ª–µ', type: 'ingredient', category: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞', baseUnit: '–∫–≥', isAlcohol: false, minStock: 15.0, currentStock: 12.4, price: 320 },
            { id: 13, code: 'ING-013', name: '–£—Ç–∫–∞ —Ü–µ–ª–∞—è', type: 'ingredient', category: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞', baseUnit: '—à—Ç', isAlcohol: false, minStock: 5.0, currentStock: 3.0, price: 850 },
            { id: 14, code: 'ING-014', name: '–ë–µ–∫–æ–Ω –Ω–∞—Ä–µ–∑–∫–∞', type: 'ingredient', category: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞', baseUnit: '–∫–≥', isAlcohol: false, minStock: 3.0, currentStock: 2.8, price: 650 },
            { id: 15, code: 'ING-015', name: '–§–∞—Ä—à –≥–æ–≤—è–∂–∏–π', type: 'semi_product', category: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞', baseUnit: '–∫–≥', isAlcohol: false, minStock: 10.0, currentStock: 7.5, price: 520 },
            
            // ========== –ú–û–õ–û–ß–ù–´–ï –ü–†–û–î–£–ö–¢–´ ==========
            { id: 20, code: 'ING-020', name: '–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞', type: 'ingredient', category: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 20.0, currentStock: 45.5, price: 450 },
            { id: 21, code: 'ING-021', name: '–°—ã—Ä –ü–∞—Ä–º–µ–∑–∞–Ω', type: 'ingredient', category: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 5.0, currentStock: 3.2, price: 1200 },
            { id: 22, code: 'ING-022', name: '–°—ã—Ä –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', type: 'ingredient', category: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 8.0, currentStock: 6.5, price: 750 },
            { id: 23, code: 'ING-023', name: '–°–ª–∏–≤–∫–∏ 33%', type: 'ingredient', category: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–ª', isAlcohol: false, minStock: 10.0, currentStock: 8.2, price: 280 },
            { id: 24, code: 'ING-024', name: '–ú–æ–ª–æ–∫–æ 3.2%', type: 'ingredient', category: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–ª', isAlcohol: false, minStock: 20.0, currentStock: 15.3, price: 65 },
            { id: 25, code: 'ING-025', name: '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ 82%', type: 'ingredient', category: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', baseUnit: '–∫–≥', isAlcohol: false, minStock: 5.0, currentStock: 3.8, price: 580 },
            
            // ========== –û–í–û–©–ò –ò –ó–ï–õ–ï–ù–¨ ==========
            { id: 30, code: 'ING-030', name: '–¢–æ–º–∞—Ç—ã —Å–≤–µ–∂–∏–µ', type: 'ingredient', category: '–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å', baseUnit: '–∫–≥', isAlcohol: false, minStock: 15.0, currentStock: 12.5, price: 180 },
            { id: 31, code: 'ING-031', name: '–û–≥—É—Ä—Ü—ã —Å–≤–µ–∂–∏–µ', type: 'ingredient', category: '–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å', baseUnit: '–∫–≥', isAlcohol: false, minStock: 10.0, currentStock: 8.3, price: 150 },
            { id: 32, code: 'ING-032', name: '–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π', type: 'ingredient', category: '–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å', baseUnit: '–∫–≥', isAlcohol: false, minStock: 20.0, currentStock: 16.4, price: 45 },
            { id: 33, code: 'ING-033', name: '–ü–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π', type: 'ingredient', category: '–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å', baseUnit: '–∫–≥', isAlcohol: false, minStock: 8.0, currentStock: 6.2, price: 220 },
            { id: 34, code: 'ING-034', name: '–°–∞–ª–∞—Ç –ê–π—Å–±–µ—Ä–≥', type: 'ingredient', category: '–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å', baseUnit: '–∫–≥', isAlcohol: false, minStock: 5.0, currentStock: 3.5, price: 180 },
            { id: 35, code: 'ING-035', name: '–ê–≤–æ–∫–∞–¥–æ', type: 'ingredient', category: '–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å', baseUnit: '—à—Ç', isAlcohol: false, minStock: 20.0, currentStock: 15.0, price: 120 },
            { id: 36, code: 'ING-036', name: '–ü–µ—Ç—Ä—É—à–∫–∞', type: 'ingredient', category: '–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å', baseUnit: '–∫–≥', isAlcohol: false, minStock: 1.0, currentStock: 0.8, price: 280 },
            
            // ========== –ë–ê–ö–ê–õ–ï–Ø ==========
            { id: 40, code: 'ING-040', name: '–ú—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è –≤/—Å', type: 'ingredient', category: '–ë–∞–∫–∞–ª–µ—è', baseUnit: '–∫–≥', isAlcohol: false, minStock: 50.0, currentStock: 120.0, price: 50 },
            { id: 41, code: 'ING-041', name: '–†–∏—Å –¥–ª—è —Ä–æ–ª–ª–æ–≤', type: 'ingredient', category: '–ë–∞–∫–∞–ª–µ—è', baseUnit: '–∫–≥', isAlcohol: false, minStock: 20.0, currentStock: 18.5, price: 180 },
            { id: 42, code: 'ING-042', name: '–ü–∞—Å—Ç–∞ —Å–ø–∞–≥–µ—Ç—Ç–∏', type: 'ingredient', category: '–ë–∞–∫–∞–ª–µ—è', baseUnit: '–∫–≥', isAlcohol: false, minStock: 15.0, currentStock: 12.3, price: 120 },
            { id: 43, code: 'ING-043', name: '–°–æ–ª—å –º–æ—Ä—Å–∫–∞—è', type: 'ingredient', category: '–ë–∞–∫–∞–ª–µ—è', baseUnit: '–∫–≥', isAlcohol: false, minStock: 10.0, currentStock: 8.5, price: 85 },
            { id: 44, code: 'ING-044', name: '–°–∞—Ö–∞—Ä –±–µ–ª—ã–π', type: 'ingredient', category: '–ë–∞–∫–∞–ª–µ—è', baseUnit: '–∫–≥', isAlcohol: false, minStock: 15.0, currentStock: 12.8, price: 65 },
            { id: 45, code: 'ING-045', name: '–ú–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ Extra Virgin', type: 'ingredient', category: '–ë–∞–∫–∞–ª–µ—è', baseUnit: '–ª', isAlcohol: false, minStock: 5.0, currentStock: 3.2, price: 850 },
            
            // ========== –°–û–£–°–´ –ò –°–ü–ï–¶–ò–ò ==========
            { id: 50, code: 'ING-050', name: '–°–æ—É—Å —Ç–æ–º–∞—Ç–Ω—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', type: 'semi_product', category: '–°–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏', baseUnit: '–ª', isAlcohol: false, minStock: 10.0, currentStock: 8.5, price: 180 },
            { id: 51, code: 'ING-051', name: '–ú–∞–π–æ–Ω–µ–∑ –ü—Ä–æ–≤–∞–Ω—Å–∞–ª—å', type: 'ingredient', category: '–°–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏', baseUnit: '–∫–≥', isAlcohol: false, minStock: 8.0, currentStock: 6.2, price: 145 },
            { id: 52, code: 'ING-052', name: '–°–æ–µ–≤—ã–π —Å–æ—É—Å', type: 'ingredient', category: '–°–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏', baseUnit: '–ª', isAlcohol: false, minStock: 3.0, currentStock: 2.1, price: 280 },
            { id: 53, code: 'ING-053', name: '–í–∞—Å–∞–±–∏ –ø–∞—Å—Ç–∞', type: 'ingredient', category: '–°–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏', baseUnit: '–∫–≥', isAlcohol: false, minStock: 0.5, currentStock: 0.3, price: 1200 },
            { id: 54, code: 'ING-054', name: '–ò–º–±–∏—Ä—å –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π', type: 'ingredient', category: '–°–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏', baseUnit: '–∫–≥', isAlcohol: false, minStock: 2.0, currentStock: 1.5, price: 380 },
            
            // ========== –ö–†–ï–ü–ö–ò–ô –ê–õ–ö–û–ì–û–õ–¨ ==========
            { id: 100, code: 'ALK-001', name: '–í–æ–¥–∫–∞ "–†—É—Å—Å–∫–∏–π –°—Ç–∞–Ω–¥–∞—Ä—Ç" 0.5–ª', type: 'alcohol', category: '–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 40.0, minStock: 20, currentStock: 12, price: 450 },
            { id: 101, code: 'ALK-002', name: '–í–æ–¥–∫–∞ "–ê–±—Å–æ–ª—é—Ç" 0.7–ª', type: 'alcohol', category: '–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 40.0, minStock: 15, currentStock: 8, price: 1200 },
            { id: 102, code: 'ALK-003', name: '–í–∏—Å–∫–∏ "Jack Daniels" 0.7–ª', type: 'alcohol', category: '–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 40.0, minStock: 10, currentStock: 6, price: 2200 },
            { id: 103, code: 'ALK-004', name: '–†–æ–º "Bacardi White" 0.7–ª', type: 'alcohol', category: '–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 40.0, minStock: 8, currentStock: 5, price: 1500 },
            { id: 104, code: 'ALK-005', name: '–¢–µ–∫–∏–ª–∞ "Olmeca" 0.7–ª', type: 'alcohol', category: '–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 38.0, minStock: 8, currentStock: 4, price: 1800 },
            { id: 105, code: 'ALK-006', name: '–ö–æ–Ω—å—è–∫ "–ê—Ä–∞—Ä–∞—Ç 5*" 0.5–ª', type: 'alcohol', category: '–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 40.0, minStock: 12, currentStock: 7, price: 1400 },
            
            // ========== –í–ò–ù–û ==========
            { id: 110, code: 'ALK-010', name: '–í–∏–Ω–æ –∫—Ä–∞—Å–Ω–æ–µ —Å—É—Ö–æ–µ "–ö—É–±–∞–Ω—å" 0.75–ª', type: 'alcohol', category: '–í–∏–Ω–æ', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 12.0, minStock: 20, currentStock: 15, price: 450 },
            { id: 111, code: 'ALK-011', name: '–í–∏–Ω–æ –±–µ–ª–æ–µ –ø–æ–ª—É—Å—É—Ö–æ–µ "–ê–±—Ä–∞—É-–î—é—Ä—Å–æ" 0.75–ª', type: 'alcohol', category: '–í–∏–Ω–æ', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 11.5, minStock: 20, currentStock: 12, price: 550 },
            { id: 112, code: 'ALK-012', name: '–®–∞–º–ø–∞–Ω—Å–∫–æ–µ "–ê–±—Ä–∞—É-–î—é—Ä—Å–æ" 0.75–ª', type: 'alcohol', category: '–í–∏–Ω–æ', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 10.5, minStock: 30, currentStock: 22, price: 650 },
            
            // ========== –ü–ò–í–û –ë–£–¢–´–õ–û–ß–ù–û–ï ==========
            { id: 120, code: 'ALK-020', name: '–ü–∏–≤–æ "–ë–∞–ª—Ç–∏–∫–∞ 3" 0.5–ª', type: 'alcohol', category: '–ü–∏–≤–æ –±—É—Ç—ã–ª–æ—á–Ω–æ–µ', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 4.8, minStock: 50, currentStock: 38, price: 85 },
            { id: 121, code: 'ALK-021', name: '–ü–∏–≤–æ "Stella Artois" 0.5–ª', type: 'alcohol', category: '–ü–∏–≤–æ –±—É—Ç—ã–ª–æ—á–Ω–æ–µ', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 5.0, minStock: 40, currentStock: 28, price: 150 },
            { id: 122, code: 'ALK-022', name: '–ü–∏–≤–æ "Guinness" 0.5–ª', type: 'alcohol', category: '–ü–∏–≤–æ –±—É—Ç—ã–ª–æ—á–Ω–æ–µ', baseUnit: '—à—Ç', isAlcohol: true, alcoholStrength: 4.2, minStock: 30, currentStock: 18, price: 220 },
            
            // ========== –ü–ò–í–û –†–ê–ó–õ–ò–í–ù–û–ï ==========
            { id: 130, code: 'ALK-030', name: '–ü–∏–≤–æ —Å–≤–µ—Ç–ª–æ–µ (–∫–µ–≥–∞ 30–ª)', type: 'alcohol', category: '–ü–∏–≤–æ —Ä–∞–∑–ª–∏–≤–Ω–æ–µ', baseUnit: '–ª', isAlcohol: true, alcoholStrength: 4.5, minStock: 50, currentStock: 28.5, price: 120 },
            { id: 131, code: 'ALK-031', name: '–ü–∏–≤–æ —Ç—ë–º–Ω–æ–µ (–∫–µ–≥–∞ 30–ª)', type: 'alcohol', category: '–ü–∏–≤–æ —Ä–∞–∑–ª–∏–≤–Ω–æ–µ', baseUnit: '–ª', isAlcohol: true, alcoholStrength: 4.8, minStock: 30, currentStock: 15.2, price: 135 },
            { id: 132, code: 'ALK-032', name: '–ü–∏–≤–æ –ø—à–µ–Ω–∏—á–Ω–æ–µ (–∫–µ–≥–∞ 50–ª)', type: 'alcohol', category: '–ü–∏–≤–æ —Ä–∞–∑–ª–∏–≤–Ω–æ–µ', baseUnit: '–ª', isAlcohol: true, alcoholStrength: 5.2, minStock: 50, currentStock: 42.8, price: 140 },
            
            // ========== –ù–ê–ü–ò–¢–ö–ò ==========
            { id: 140, code: 'DRK-001', name: 'Coca-Cola 0.33–ª', type: 'ingredient', category: '–ù–∞–ø–∏—Ç–∫–∏', baseUnit: '—à—Ç', isAlcohol: false, minStock: 100, currentStock: 85, price: 45 },
            { id: 141, code: 'DRK-002', name: 'Sprite 0.33–ª', type: 'ingredient', category: '–ù–∞–ø–∏—Ç–∫–∏', baseUnit: '—à—Ç', isAlcohol: false, minStock: 80, currentStock: 65, price: 45 },
            { id: 142, code: 'DRK-003', name: '–°–æ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π Rich 1–ª', type: 'ingredient', category: '–ù–∞–ø–∏—Ç–∫–∏', baseUnit: '—à—Ç', isAlcohol: false, minStock: 30, currentStock: 22, price: 120 },
            { id: 143, code: 'DRK-004', name: '–í–æ–¥–∞ –º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≥–∞–∑. 0.5–ª', type: 'ingredient', category: '–ù–∞–ø–∏—Ç–∫–∏', baseUnit: '—à—Ç', isAlcohol: false, minStock: 100, currentStock: 78, price: 35 },
            
            // ========== –ü–û–õ–£–§–ê–ë–†–ò–ö–ê–¢–´ ==========
            { id: 150, code: 'SEMI-001', name: '–¢–µ—Å—Ç–æ –¥–ª—è –ø–∏—Ü—Ü—ã (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)', type: 'semi_product', category: '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã', baseUnit: '—à—Ç', isAlcohol: false, minStock: 20, currentStock: 15, price: 85 },
            { id: 151, code: 'SEMI-002', name: '–ë—É–ª—å–æ–Ω –∫—É—Ä–∏–Ω—ã–π', type: 'semi_product', category: '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã', baseUnit: '–ª', isAlcohol: false, minStock: 10, currentStock: 8.5, price: 120 },
            { id: 152, code: 'SEMI-003', name: '–°–æ—É—Å –¥–ª—è –ø–∞—Å—Ç—ã –ö–∞—Ä–±–æ–Ω–∞—Ä–∞', type: 'semi_product', category: '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã', baseUnit: '–ª', isAlcohol: false, minStock: 5, currentStock: 3.2, price: 350 }
        ];
    }
    
    loadRecipes() {
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–∫–∞—Ä—Ç
        return [
            {
                id: 1,
                code: 'TK-001',
                dishId: 101,
                dishName: '–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ 30 —Å–º',
                version: 'v1.2',
                yieldOut: 450,
                yieldUnit: '–≥',
                costPrice: 180,
                ingredients: [
                    { id: 1, name: '–¢–µ—Å—Ç–æ', qty: 250, unit: '–≥', k_evap: 5 },
                    { id: 2, name: '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞', qty: 150, unit: '–≥' },
                    { id: 3, name: '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', qty: 100, unit: '–≥' },
                    { id: 4, name: '–°–æ—É—Å —Ç–æ–º–∞—Ç–Ω—ã–π', qty: 80, unit: '–≥' }
                ]
            },
            {
                id: 2,
                code: 'TK-002',
                dishId: 102,
                dishName: '–†–æ–ª–ª –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è',
                version: 'v1.0',
                yieldOut: 220,
                yieldUnit: '–≥',
                costPrice: 220,
                ingredients: [
                    { id: 5, name: '–†–∏—Å –¥–ª—è —Ä–æ–ª–ª–æ–≤', qty: 120, unit: '–≥' },
                    { id: 1, name: '–õ–æ—Å–æ—Å—å —Ñ–∏–ª–µ', qty: 80, unit: '–≥' },
                    { id: 6, name: '–°—ã—Ä –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', qty: 50, unit: '–≥' }
                ]
            }
        ];
    }
    
    loadWarehouses() {
        return [
            { id: 1, code: 'WH-MAIN', name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', type: 'main' },
            { id: 2, code: 'WH-KITCHEN', name: '–ö—É—Ö–Ω—è/–¶–µ—Ö', type: 'kitchen' },
            { id: 3, code: 'WH-BAR', name: '–ë–∞—Ä', type: 'bar' },
            { id: 4, code: 'WH-DRAFT', name: '–†–∞–∑–ª–∏–≤–Ω–æ–π —É–∑–µ–ª', type: 'draft_beer' }
        ];
    }
    
    loadStockBalances() {
        return [
            { warehouseId: 1, productId: 1, quantity: 0.8, costPerUnit: 1200, batchNumber: 'L-20240115', expiryDate: '2024-01-22' },
            { warehouseId: 1, productId: 2, quantity: 45.5, costPerUnit: 450, batchNumber: 'M-20240110', expiryDate: '2024-02-10' },
            { warehouseId: 3, productId: 3, quantity: 12, costPerUnit: 450, batchNumber: 'V-20240105', expiryDate: '2025-12-31' }
        ];
    }
    
    loadDashboardData() {
        console.log('üìä Loading dashboard data...');
        // Dashboard —É–∂–µ —Å—Ç–∞—Ç–∏—á–µ–Ω –≤ HTML, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    }
    
    loadNomenclatureData() {
        console.log('üì¶ Loading nomenclature...');
        console.log('üì¶ Products count:', this.products.length);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        if (window.nomenclatureModule) {
            console.log('üîÑ Calling nomenclatureModule.init()...');
            nomenclatureModule.init();
        } else {
            console.error('‚ùå nomenclatureModule not found!');
        }
    }
    
    loadRecipesData() {
        console.log('üìñ Loading recipes...');
        if (window.recipesModule) {
            recipesModule.init();
        }
    }
    
    loadWarehouseData() {
        console.log('üè≠ Loading warehouse data...');
        if (window.warehouseModule) {
            warehouseModule.init();
        }
    }
    
    loadProductionData() {
        console.log('‚öôÔ∏è Loading production data...');
        if (window.productionModule) {
            productionModule.init();
        }
    }
    
    loadBarData() {
        console.log('üç∫ Loading bar data...');
        if (window.barModule) {
            barModule.init();
        }
    }
    
    loadInventoryData() {
        console.log('üìã Loading inventory data...');
        if (window.inventoryCountModule) {
            inventoryCountModule.init();
        }
    }
    
    loadEGAISData() {
        console.log('üç∑ Loading EGAIS data...');
        if (window.egaisModule) {
            egaisModule.init();
        }
    }
    
    loadCRPTData() {
        console.log('üè∑Ô∏è Loading CRPT data...');
        if (window.crptModule) {
            crptModule.init();
        }
    }
    
    loadMercuryData() {
        console.log('üêÑ Loading Mercury data...');
        if (window.mercuryModule) {
            mercuryModule.init();
        }
    }
    
    loadIntegrationsData() {
        console.log('üîÑ Loading integrations...');
        if (window.integrationsModule) {
            integrationsModule.init();
        }
    }
    
    loadReportsData() {
        console.log('üìà Loading reports...');
        if (window.reportsModule) {
            reportsModule.init();
        }
    }
    
    loadSettingsData() {
        console.log('‚öôÔ∏è Loading settings...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (window.settingsModule) {
            settingsModule.init();
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º UI backup
        if (window.backupModule) {
            backupModule.renderBackupUI();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Audit Log
        this.renderAuditLog();
    }

    /**
     * –†–µ–Ω–¥–µ—Ä Audit Log
     */
    renderAuditLog() {
        const container = document.getElementById('auditLogContainer');
        if (!container) return;

        const logs = this.getAuditLog(50);

        if (logs.length === 0) {
            container.innerHTML = `
                <p style="text-align: center; color: var(--text-light); opacity: 0.7; padding: 2rem;">
                    –ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç
                </p>
            `;
            return;
        }

        const getActionText = (action) => {
            const actions = {
                'product_created': '‚ûï –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä',
                'product_updated': '‚úèÔ∏è –ò–∑–º–µ–Ω—ë–Ω —Ç–æ–≤–∞—Ä',
                'product_deleted': 'üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ç–æ–≤–∞—Ä',
                'recipe_created': '‚ûï –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Ö–∫–∞—Ä—Ç–∞',
                'recipe_updated': '‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∞ —Ç–µ—Ö–∫–∞—Ä—Ç–∞',
                'document_posted': '‚úì –ü—Ä–æ–≤–µ–¥—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç',
                'backup_created': 'üíæ –°–æ–∑–¥–∞–Ω backup',
                'backup_restored': '‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω backup',
                'old_data_cleared': 'üóëÔ∏è –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ',
                'settings_updated': '‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
            };
            return actions[action] || action;
        };

        container.innerHTML = `
            <div style="max-height: 500px; overflow-y: auto;">
                <table class="table">
                    <thead>
                        <tr>
                            <th>–î–∞—Ç–∞/–í—Ä–µ–º—è</th>
                            <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                            <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                            <th>–î–µ—Ç–∞–ª–∏</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${logs.map(log => `
                            <tr>
                                <td style="white-space: nowrap;">${new Date(log.timestamp).toLocaleString('ru-RU')}</td>
                                <td>${getActionText(log.action)}</td>
                                <td><code>${log.user}</code></td>
                                <td style="font-size: 0.85em; color: var(--text-light); opacity: 0.8;">
                                    ${JSON.stringify(log.details).substring(0, 100)}
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Audit Log
     */
    addAuditLog(action, details = {}) {
        const logEntry = {
            id: Date.now(),
            timestamp: new Date().toISOString(),
            action: action,
            user: this.currentUser || 'system',
            details: details
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥
        let auditLog = [];
        const saved = localStorage.getItem('dandy_audit_log');
        if (saved) {
            try {
                auditLog = JSON.parse(saved);
            } catch (e) {
                console.error('Error parsing audit log:', e);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        auditLog.push(logEntry);

        // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        if (auditLog.length > 1000) {
            auditLog = auditLog.slice(-1000);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        localStorage.setItem('dandy_audit_log', JSON.stringify(auditLog));

        console.log('üìù Audit log:', action, details);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ Audit Log
     */
    getAuditLog(limit = 100) {
        const saved = localStorage.getItem('dandy_audit_log');
        if (!saved) return [];

        try {
            const log = JSON.parse(saved);
            return log.slice(-limit).reverse(); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π, –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
        } catch (e) {
            console.error('Error parsing audit log:', e);
            return [];
        }
    }
    
    // ===== Business Logic =====
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
     */
    createProduct(productData) {
        const newProduct = {
            id: Date.now(),
            code: productData.code || `PRD-${Date.now()}`,
            name: productData.name,
            type: productData.type,
            category: productData.category,
            baseUnit: productData.baseUnit,
            isAlcohol: productData.isAlcohol || false,
            minStock: productData.minStock || 0,
            currentStock: 0,
            price: productData.price || 0,
            createdAt: new Date().toISOString()
        };
        
        this.products.push(newProduct);
        this.saveToLocalStorage('products', this.products);
        
        return newProduct;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    createRecipe(recipeData) {
        const newRecipe = {
            id: Date.now(),
            code: recipeData.code || `TK-${Date.now()}`,
            dishId: recipeData.dishId,
            dishName: recipeData.dishName,
            version: recipeData.version || 'v1.0',
            yieldOut: recipeData.yieldOut,
            yieldUnit: recipeData.yieldUnit,
            ingredients: recipeData.ingredients || [],
            createdAt: new Date().toISOString()
        };
        
        // –†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        newRecipe.costPrice = this.calculateRecipeCost(newRecipe);
        
        this.recipes.push(newRecipe);
        this.saveToLocalStorage('recipes', this.recipes);
        
        return newRecipe;
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –¢–ö
     */
    calculateRecipeCost(recipe) {
        let totalCost = 0;
        
        recipe.ingredients.forEach(ing => {
            const product = this.products.find(p => p.id === ing.id);
            if (product) {
                // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏ (—É–≤–∞—Ä–∫–∞/—É–∂–∞—Ä–∫–∞)
                const lossCoeff = 1 + (ing.k_evap || 0) / 100;
                const actualQty = ing.qty * lossCoeff;
                
                // –ü–µ—Ä–µ—Å—á–µ—Ç –≤ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É
                const qtyInBaseUnit = this.convertToBaseUnit(actualQty, ing.unit, product.baseUnit);
                
                totalCost += qtyInBaseUnit * product.price;
            }
        });
        
        return Math.round(totalCost * 100) / 100;
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
     */
    convertToBaseUnit(quantity, fromUnit, toUnit) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤)
        const conversions = {
            '–∫–≥-–≥': 1000,
            '–≥-–∫–≥': 0.001,
            '–ª-–º–ª': 1000,
            '–º–ª-–ª': 0.001
        };
        
        const key = `${toUnit}-${fromUnit}`;
        const coeff = conversions[key] || 1;
        
        return quantity * coeff;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞
     */
    createArrivalDocument(docData) {
        const newDoc = {
            id: Date.now(),
            docType: 'arrival',
            docNumber: docData.docNumber || `ARR-${Date.now()}`,
            docDate: docData.docDate || new Date().toISOString().split('T')[0],
            warehouseId: docData.warehouseId,
            supplierId: docData.supplierId,
            lines: docData.lines || [],
            status: 'draft',
            createdAt: new Date().toISOString()
        };
        
        // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
        newDoc.totalAmount = newDoc.lines.reduce((sum, line) => {
            return sum + (line.quantity * line.costPerUnit);
        }, 0);
        
        this.documents.push(newDoc);
        this.saveToLocalStorage('documents', this.documents);
        
        return newDoc;
    }
    
    /**
     * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤)
     */
    postDocument(docId) {
        const doc = this.documents.find(d => d.id === docId);
        if (!doc || doc.status === 'posted') {
            throw new Error('Document not found or already posted');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        doc.lines.forEach(line => {
            const balance = this.stockBalances.find(b => 
                b.warehouseId === doc.warehouseId && 
                b.productId === line.productId &&
                b.batchNumber === line.batchNumber
            );
            
            if (balance) {
                balance.quantity += line.quantity;
            } else {
                this.stockBalances.push({
                    warehouseId: doc.warehouseId,
                    productId: line.productId,
                    quantity: line.quantity,
                    costPerUnit: line.costPerUnit,
                    batchNumber: line.batchNumber,
                    expiryDate: line.expiryDate
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ
            const product = this.products.find(p => p.id === line.productId);
            if (product) {
                product.currentStock += line.quantity;
            }
        });
        
        doc.status = 'posted';
        doc.postedAt = new Date().toISOString();
        
        this.saveToLocalStorage('documents', this.documents);
        this.saveToLocalStorage('stockBalances', this.stockBalances);
        this.saveToLocalStorage('products', this.products);
        
        return doc;
    }
    
    /**
     * –°–ø–∏—Å–∞–Ω–∏–µ –ø–æ —á–µ–∫—É (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     */
    writeoffBySale(saleData) {
        const writeoffDoc = {
            id: Date.now(),
            docType: 'writeoff',
            docNumber: `WO-${Date.now()}`,
            docDate: new Date().toISOString().split('T')[0],
            reason: 'sale',
            receiptId: saleData.receiptId,
            lines: [],
            status: 'draft',
            createdAt: new Date().toISOString()
        };
        
        // –†–∞–∑–±–∏—Ä–∞–µ–º –±–ª—é–¥–∞ –ø–æ –¢–ö
        saleData.items.forEach(item => {
            const recipe = this.recipes.find(r => r.dishId === item.dishId);
            if (recipe) {
                recipe.ingredients.forEach(ing => {
                    // FEFO: —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–ª–∏–∂–∞–π—à–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏
                    const batch = this.findBatchForWriteoff(ing.id, saleData.warehouseId);
                    
                    if (batch) {
                        writeoffDoc.lines.push({
                            productId: ing.id,
                            batchId: batch.id,
                            batchNumber: batch.batchNumber,
                            quantity: ing.qty * item.quantity,
                            unit: ing.unit,
                            costPerUnit: batch.costPerUnit
                        });
                    } else {
                        console.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è ${ing.name}`);
                    }
                });
            }
        });
        
        this.documents.push(writeoffDoc);
        this.postDocument(writeoffDoc.id);
        
        return writeoffDoc;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (FEFO)
     */
    findBatchForWriteoff(productId, warehouseId) {
        const batches = this.stockBalances
            .filter(b => b.productId === productId && b.warehouseId === warehouseId && b.quantity > 0)
            .sort((a, b) => new Date(a.expiryDate) - new Date(b.expiryDate));
        
        return batches[0];
    }
    
    /**
     * –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è
     */
    createInventory(inventoryData) {
        const invDoc = {
            id: Date.now(),
            docType: 'inventory',
            docNumber: `INV-${Date.now()}`,
            docDate: new Date().toISOString().split('T')[0],
            warehouseId: inventoryData.warehouseId,
            lines: inventoryData.lines || [],
            status: 'draft',
            createdAt: new Date().toISOString()
        };
        
        // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
        invDoc.lines.forEach(line => {
            const balance = this.stockBalances.find(b => 
                b.warehouseId === invDoc.warehouseId && 
                b.productId === line.productId &&
                b.batchNumber === line.batchNumber
            );
            
            line.quantityByAccount = balance ? balance.quantity : 0;
            line.quantityActual = line.quantityActual || 0;
            line.difference = line.quantityActual - line.quantityByAccount;
            line.amountDifference = line.difference * (balance ? balance.costPerUnit : 0);
        });
        
        this.documents.push(invDoc);
        this.saveToLocalStorage('documents', this.documents);
        
        return invDoc;
    }
    
    /**
     * –ï–ì–ê–ò–°: —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è
     */
    createEGAISAct(actData) {
        const egaisAct = {
            id: Date.now(),
            operationType: actData.operationType, // 'sale', 'writeoff'
            documentId: actData.documentId,
            egaisGuid: `act-${Date.now()}`,
            ttnNumber: actData.ttnNumber,
            utmStatus: 'pending',
            createdAt: new Date().toISOString()
        };
        
        this.egaisOperations.push(egaisAct);
        this.saveToLocalStorage('egaisOperations', this.egaisOperations);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –£–¢–ú
        setTimeout(() => {
            egaisAct.utmStatus = 'sent';
            console.log('üì§ –ï–ì–ê–ò–° –∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –£–¢–ú:', egaisAct.egaisGuid);
        }, 1000);
        
        return egaisAct;
    }
    
    // ===== Utilities =====
    
    saveToLocalStorage(key, data) {
        try {
            localStorage.setItem(`dandy_inventory_${key}`, JSON.stringify(data));
            console.log(`üíæ Saved to localStorage: ${key}`);
        } catch (error) {
            console.error('‚ùå Error saving to localStorage:', error);
        }
    }
    
    loadFromLocalStorage(key) {
        try {
            const data = localStorage.getItem(`dandy_inventory_${key}`);
            return data ? JSON.parse(data) : null;
        } catch (error) {
            console.error('‚ùå Error loading from localStorage:', error);
            return null;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ menu_data.json (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–æ–¥—É–ª—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã)
     */
    async autoLoadMenuData() {
        try {
            // –ë—ã—Å—Ç—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ backend
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch('http://localhost:3000/menu_data.json', {
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error('Backend not available');
            }
            
            const data = await response.json();
            let addedCount = 0;
            
            // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
            const categoryTypeMap = {
                '–ü–∏—Ü—Ü–∞': 'dish',
                '–†–æ–ª–ª—ã': 'dish',
                '–ú–∞–∫–∏': 'dish',
                '–ó–∞–ø–µ—á–µ–Ω–Ω—ã–µ': 'dish',
                '–¢–µ–º–ø—É—Ä–∞': 'dish',
                '–ì—É–Ω–∫–∞–Ω—ã': 'dish',
                '–°—É—à–∏': 'dish',
                '–°–µ—Ç—ã': 'dish',
                '–°–∞–ª–∞—Ç—ã': 'dish',
                '–ó–∞–∫—É—Å–∫–∏': 'dish',
                '–°—É–ø—ã': 'dish',
                '–°—ç–Ω–¥–≤–∏—á–∏': 'dish',
                'Wok': 'dish',
                '–ó–∞–≤—Ç—Ä–∞–∫–∏': 'dish',
                '–ë–ª–∏–Ω—ã': 'dish',
                '–ü–∏—Ä–æ–≥–∏': 'dish',
                '–ù–∞–ø–∏—Ç–∫–∏': 'ingredient',
                '–°–æ—É—Å—ã': 'semi_product',
                '–ö–æ–º–±–æ': 'dish'
            };
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
            let maxId = Math.max(...this.products.map(p => p.id), 0);
            
            data.offers.forEach(item => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
                const exists = this.products.some(p => 
                    p.code === `MENU-${item.id}` || p.name.toLowerCase() === item.name.trim().toLowerCase()
                );
                
                if (exists) return;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const categoryName = item.category_name || '–î—Ä—É–≥–æ–µ';
                const productType = categoryTypeMap[categoryName] || 'ingredient';
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (40% –æ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏)
                const price = parseInt(item.price) || 0;
                const cost = Math.round(price * 0.4);
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ 1 —Ä—É–±–ª—å
                if (price <= 1) return;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                maxId++;
                this.products.push({
                    id: maxId,
                    code: `MENU-${item.id}`,
                    name: item.name.trim(),
                    type: productType,
                    category: categoryName,
                    baseUnit: '—à—Ç',
                    isAlcohol: false,
                    minStock: 5.0,
                    currentStock: 0,
                    price: cost,
                    salePrice: price,
                    description: item.description ? item.description.replace(/<[^>]*>/g, '').substring(0, 200) : '',
                    picture: item.picture || '',
                    url: item.url || ''
                });
                
                addedCount++;
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            this.saveToLocalStorage('products', this.products);
            
            console.log(`‚úÖ Auto-loaded ${addedCount} products from menu! Total: ${this.products.length}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            if (this.currentPage === 'nomenclature' && window.nomenclatureModule) {
                setTimeout(() => {
                    nomenclatureModule.renderProductsList();
                }, 100);
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Could not auto-load menu:', error.message);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
     */
    generateReport(reportType, params = {}) {
        console.log(`üìä Generating report: ${reportType}`, params);
        
        switch(reportType) {
            case 'cogs':
                return this.generateCOGSReport(params);
            case 'menu_engineering':
                return this.generateMenuEngineeringReport(params);
            case 'abc_xyz':
                return this.generateABCXYZReport(params);
            default:
                console.warn('Unknown report type:', reportType);
                return null;
        }
    }
    
    generateCOGSReport(params) {
        // COGS (Cost of Goods Sold) –æ—Ç—á–µ—Ç
        const report = {
            type: 'cogs',
            period: params.period,
            totalSales: 0,
            totalCOGS: 0,
            grossProfit: 0,
            grossMargin: 0,
            items: []
        };
        
        // –ó–¥–µ—Å—å –±—ã —à–µ–ª —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã–º –±–ª—é–¥–∞–º
        
        return report;
    }
    
    generateMenuEngineeringReport(params) {
        // Menu Engineering: Stars, Plowhorses, Puzzles, Dogs
        return {
            type: 'menu_engineering',
            stars: [], // –í—ã—Å–æ–∫–∞—è –º–∞—Ä–∂–∞ + –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å
            plowhorses: [], // –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ + –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å
            puzzles: [], // –í—ã—Å–æ–∫–∞—è –º–∞—Ä–∂–∞ + –Ω–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å
            dogs: [] // –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ + –Ω–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å
        };
    }
    
    generateABCXYZReport(params) {
        // ABC-XYZ –∞–Ω–∞–ª–∏–∑
        return {
            type: 'abc_xyz',
            A: [], // –í—ã—Å–æ–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (80% –æ–±–æ—Ä–æ—Ç–∞)
            B: [], // –°—Ä–µ–¥–Ω—è—è (15%)
            C: [], // –ù–∏–∑–∫–∞—è (5%)
            X: [], // –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å
            Y: [], // –°–µ–∑–æ–Ω–Ω—ã–π
            Z: [] // –ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π
        };
    }
}

// ===== Global Functions =====

function createProduct() {
    if (window.inventorySystem) {
        alert('üéØ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ');
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ ‚Äî –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ñ–æ—Ä–º–æ–π
    }
}

function createRecipe() {
    if (window.inventorySystem) {
        alert('üìñ –†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ—Ö–∫–∞—Ä—Ç—ã\n\n–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¢–ö/–¢–¢–ö');
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¢–ö
    }
}

function editRecipe(code) {
    if (window.inventorySystem) {
        alert(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã ${code}`);
    }
}

function startInventory() {
    if (window.inventorySystem) {
        alert('üéØ –ù–∞—á–∞–ª–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –∏ –∑–æ–Ω—É –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞');
    }
}

function openBottle() {
    if (window.inventorySystem) {
        alert('üîì –í—Å–∫—Ä—ã—Ç–∏–µ –±—É—Ç—ã–ª–∫–∏\n\n–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è –≤ –ï–ì–ê–ò–°');
    }
}

function syncFlowMeter() {
    if (window.inventorySystem) {
        alert('üîÑ –°–≤–µ—Ä–∫–∞ —Å —Ä–∞—Å—Ö–æ–¥–æ–º–µ—Ä–æ–º\n\n–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
    }
}

// ===== Initialization =====

let inventorySystem;

document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Initializing DANDY Inventory System...');
    
    inventorySystem = new DandyInventorySystem();
    window.inventorySystem = inventorySystem; // Make globally available
    
    console.log('‚úÖ System initialized successfully');
    console.log('üì¶ Products:', inventorySystem.products.length);
    console.log('üìñ Recipes:', inventorySystem.recipes.length);
    console.log('üè≠ Warehouses:', inventorySystem.warehouses.length);
});

// Export for modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DandyInventorySystem;
}

