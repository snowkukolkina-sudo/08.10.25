/**
 * DANDY Inventory ‚Äî –ú–æ–¥—É–ª—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç (–¢–ö/–¢–¢–ö)
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç—É—Ä–∞–º–∏, –∫–∞–ª—å–∫—É–ª—è—Ü–∏—è, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ—Ç–µ—Ä—å
 */

class RecipesModule {
    constructor(inventorySystem) {
        this.system = inventorySystem;
        this.selectedRecipe = null;
        this.editingIngredients = [];
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log('üìñ Recipes module initialized');
        this.renderRecipesList();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö–∫–∞—Ä—Ç
     */
    renderRecipesList() {
        const tbody = document.querySelector('#recipesTableBody');
        if (!tbody) return;

        if (this.system.recipes.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" style="text-align: center; padding: 2rem; color: #F3EADB; opacity: 0.7;">
                        –¢–µ—Ö–∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –¢–ö!
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = this.system.recipes.map(recipe => `
            <tr style="cursor: pointer;" onclick="recipesModule.selectRecipe(${recipe.id})">
                <td><code>${recipe.code}</code></td>
                <td><strong>${recipe.dishName}</strong></td>
                <td>${recipe.yieldOut} ${recipe.yieldUnit}</td>
                <td><strong>‚ÇΩ ${recipe.costPrice.toFixed(2)}</strong></td>
                <td>${recipe.ingredients.length}</td>
                <td><span class="badge badge-info">${recipe.version}</span></td>
                <td>
                    <button class="btn btn-primary btn-small" onclick="event.stopPropagation(); recipesModule.editRecipe(${recipe.id})">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-secondary btn-small" onclick="event.stopPropagation(); recipesModule.calculateRecipe(${recipe.id})">
                        üßÆ –ö–∞–ª—å–∫—É–ª—è—Ü–∏—è
                    </button>
                </td>
            </tr>
        `).join('');
    }

    /**
     * –í—ã–±–æ—Ä —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    selectRecipe(recipeId) {
        this.selectedRecipe = this.system.recipes.find(r => r.id === recipeId);
        if (this.selectedRecipe) {
            this.showRecipeDetails(this.selectedRecipe);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    showRecipeDetails(recipe) {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        const ingredientsHTML = recipe.ingredients.map(ing => {
            const product = this.system.products.find(p => p.id === ing.id);
            const productName = product ? product.name : ing.name;
            const loss = (ing.k_evap || 0) + (ing.k_trim || 0) + (ing.k_wash || 0);
            
            return `
                <tr>
                    <td>${productName}</td>
                    <td>${ing.qty} ${ing.unit}</td>
                    <td>${loss > 0 ? `${loss.toFixed(1)}%` : '‚Äî'}</td>
                    <td>${product ? `‚ÇΩ ${(ing.qty * product.price).toFixed(2)}` : '‚Äî'}</td>
                </tr>
            `;
        }).join('');

        modal.innerHTML = `
            <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); border-radius: 16px; padding: 2rem; max-width: 900px; width: 90%; max-height: 90vh; overflow-y: auto;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                    <h2 style="margin: 0; color: #eebc5c;">üìñ ${recipe.dishName}</h2>
                    <button onclick="this.closest('.modal-overlay').remove()" 
                            style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #F3EADB; opacity: 0.7;">√ó</button>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                    <div style="background: rgba(59, 130, 246, 0.1); padding: 1rem; border-radius: 8px; border: 1px solid rgba(59, 130, 246, 0.3);">
                        <strong style="display: block; margin-bottom: 0.5rem; color: #F3EADB;">–ö–æ–¥ –¢–ö</strong>
                        <code style="font-size: 1.1em; color: #F3EADB;">${recipe.code}</code>
                    </div>
                    <div style="background: rgba(34, 197, 94, 0.1); padding: 1rem; border-radius: 8px; border: 1px solid rgba(34, 197, 94, 0.3);">
                        <strong style="display: block; margin-bottom: 0.5rem; color: #F3EADB;">–í—ã—Ö–æ–¥</strong>
                        <span style="font-size: 1.2em; font-weight: 700; color: #F3EADB;">${recipe.yieldOut} ${recipe.yieldUnit}</span>
                    </div>
                    <div style="background: rgba(234, 179, 8, 0.1); padding: 1rem; border-radius: 8px; border: 1px solid rgba(234, 179, 8, 0.3);">
                        <strong style="display: block; margin-bottom: 0.5rem; color: #F3EADB;">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</strong>
                        <span style="font-size: 1.2em; font-weight: 700; color: #eebc5c;">‚ÇΩ ${recipe.costPrice.toFixed(2)}</span>
                    </div>
                </div>

                <div style="background: rgba(255,255,255,0.05); padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; border: 1px solid rgba(255,255,255,0.12);">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>–í–µ—Ä—Å–∏—è:</strong> ${recipe.version}
                        </div>
                        <div>
                            <strong>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:</strong> ${recipe.ingredients.length}
                        </div>
                        <div>
                            <strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${recipe.createdAt ? new Date(recipe.createdAt).toLocaleDateString('ru-RU') : '‚Äî'}
                        </div>
                    </div>
                </div>

                <h3 style="margin-top: 1.5rem; margin-bottom: 1rem; color: #eebc5c;">ü•ò –°–æ—Å—Ç–∞–≤</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç</th>
                            <th>–ó–∞–∫–ª–∞–¥–∫–∞</th>
                            <th>–ü–æ—Ç–µ—Ä–∏</th>
                            <th>–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${ingredientsHTML}
                    </tbody>
                    <tfoot>
                        <tr style="background: rgba(255,255,255,0.05); font-weight: 700;">
                            <td colspan="3">–ò–¢–û–ì–û:</td>
                            <td>‚ÇΩ ${recipe.costPrice.toFixed(2)}</td>
                        </tr>
                    </tfoot>
                </table>

                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button onclick="recipesModule.editRecipe(${recipe.id}); this.closest('.modal-overlay').remove();" 
                            class="btn btn-primary">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button onclick="recipesModule.calculateRecipe(${recipe.id})" 
                            class="btn btn-secondary">
                        üßÆ –ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç
                    </button>
                    <button onclick="recipesModule.duplicateRecipe(${recipe.id}); this.closest('.modal-overlay').remove();" 
                            class="btn btn-secondary">
                        üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" 
                            class="btn btn-secondary">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    createRecipe() {
        this.editingIngredients = [];
        this.showRecipeEditor(null);
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    editRecipe(recipeId) {
        const recipe = this.system.recipes.find(r => r.id === recipeId);
        if (!recipe) return;

        this.editingIngredients = [...recipe.ingredients];
        this.showRecipeEditor(recipe);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    showRecipeEditor(recipe) {
        const isNew = !recipe;
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.id = 'recipeEditorModal';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); border-radius: 16px; padding: 2rem; max-width: 1000px; width: 95%; max-height: 95vh; overflow-y: auto;">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">
                    ${isNew ? '‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã' : '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã'}
                </h2>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                    <div class="form-group">
                        <label class="form-label">–ö–æ–¥ –¢–ö*</label>
                        <input type="text" class="form-input" id="recipeCode" value="${recipe ? recipe.code : ''}" placeholder="TK-001">
                    </div>

                    <div class="form-group">
                        <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞*</label>
                        <input type="text" class="form-input" id="recipeDishName" value="${recipe ? recipe.dishName : ''}" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏">
                    </div>

                    <div class="form-group">
                        <label class="form-label">–í—ã—Ö–æ–¥ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)*</label>
                        <input type="number" class="form-input" id="recipeYield" value="${recipe ? recipe.yieldOut : ''}" step="0.01" placeholder="450">
                    </div>

                    <div class="form-group">
                        <label class="form-label">–ï–¥–∏–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∞*</label>
                        <select class="form-select" id="recipeYieldUnit">
                            <option value="–≥" ${recipe && recipe.yieldUnit === '–≥' ? 'selected' : ''}>–≥</option>
                            <option value="–∫–≥" ${recipe && recipe.yieldUnit === '–∫–≥' ? 'selected' : ''}>–∫–≥</option>
                            <option value="–º–ª" ${recipe && recipe.yieldUnit === '–º–ª' ? 'selected' : ''}>–º–ª</option>
                            <option value="–ª" ${recipe && recipe.yieldUnit === '–ª' ? 'selected' : ''}>–ª</option>
                            <option value="—à—Ç" ${recipe && recipe.yieldUnit === '—à—Ç' ? 'selected' : ''}>—à—Ç</option>
                            <option value="–ø–æ—Ä—Ü–∏—è" ${recipe && recipe.yieldUnit === '–ø–æ—Ä—Ü–∏—è' ? 'selected' : ''}>–ø–æ—Ä—Ü–∏—è</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">–í–µ—Ä—Å–∏—è</label>
                        <input type="text" class="form-input" id="recipeVersion" value="${recipe ? recipe.version : 'v1.0'}" placeholder="v1.0">
                    </div>
                </div>

                <h3 style="margin-top: 1.5rem; margin-bottom: 1rem; color: #eebc5c;">ü•ò –°–æ—Å—Ç–∞–≤</h3>
                
                <div style="margin-bottom: 1rem;">
                    <button onclick="recipesModule.addIngredient()" class="btn btn-primary btn-small">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                    </button>
                </div>

                <div id="ingredientsList" style="margin-bottom: 1.5rem;">
                    <!-- –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –∑–¥–µ—Å—å -->
                </div>

                <div style="background: rgba(34, 197, 94, 0.1); padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; border: 1px solid rgba(34, 197, 94, 0.3);">
                    <strong style="color: #F3EADB;">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä–∞—Å—á—ë—Ç–Ω–∞—è):</strong> 
                    <span id="calculatedCost" style="font-size: 1.2em; font-weight: 700; color: #eebc5c; margin-left: 0.5rem;">
                        ‚ÇΩ 0.00
                    </span>
                </div>

                <div style="display: flex; gap: 1rem;">
                    <button onclick="recipesModule.saveRecipe(${recipe ? recipe.id : 'null'})" class="btn btn-primary">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button onclick="recipesModule.calculateCost()" class="btn btn-secondary">
                        üßÆ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        this.renderIngredientsList();
        this.calculateCost();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
     */
    renderIngredientsList() {
        const container = document.getElementById('ingredientsList');
        if (!container) return;

        if (this.editingIngredients.length === 0) {
            container.innerHTML = `
                <div style="padding: 2rem; text-align: center; color: #F3EADB; opacity: 0.7; background: rgba(255,255,255,0.05); border-radius: 8px; border: 1px solid rgba(255,255,255,0.12);">
                    –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!
                </div>
            `;
            return;
        }

        container.innerHTML = this.editingIngredients.map((ing, index) => {
            const product = this.system.products.find(p => p.id === ing.id);
            return `
                <div style="background: rgba(255,255,255,0.05); padding: 1rem; border-radius: 8px; margin-bottom: 0.75rem; border: 1px solid rgba(255,255,255,0.12);">
                    <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr auto; gap: 0.75rem; align-items: end;">
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç</label>
                            <select class="form-select" onchange="recipesModule.updateIngredient(${index}, 'id', parseInt(this.value))">
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                                ${this.system.products.filter(p => p.type === 'ingredient' || p.type === 'semi_product').map(p => `
                                    <option value="${p.id}" ${ing.id === p.id ? 'selected' : ''}>${p.name}</option>
                                `).join('')}
                            </select>
                        </div>
                        
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                            <input type="number" class="form-input" value="${ing.qty}" step="0.01" 
                                   onchange="recipesModule.updateIngredient(${index}, 'qty', parseFloat(this.value))">
                        </div>
                        
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–ï–¥–∏–Ω–∏—Ü–∞</label>
                            <select class="form-select" onchange="recipesModule.updateIngredient(${index}, 'unit', this.value)">
                                <option value="–≥" ${ing.unit === '–≥' ? 'selected' : ''}>–≥</option>
                                <option value="–∫–≥" ${ing.unit === '–∫–≥' ? 'selected' : ''}>–∫–≥</option>
                                <option value="–º–ª" ${ing.unit === '–º–ª' ? 'selected' : ''}>–º–ª</option>
                                <option value="–ª" ${ing.unit === '–ª' ? 'selected' : ''}>–ª</option>
                                <option value="—à—Ç" ${ing.unit === '—à—Ç' ? 'selected' : ''}>—à—Ç</option>
                            </select>
                        </div>
                        
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–ü–æ—Ç–µ—Ä–∏ %</label>
                            <input type="number" class="form-input" value="${ing.k_evap || 0}" step="0.1" 
                                   onchange="recipesModule.updateIngredient(${index}, 'k_evap', parseFloat(this.value))"
                                   title="–£–≤–∞—Ä–∫–∞/—É–∂–∞—Ä–∫–∞">
                        </div>
                        
                        <div style="color: #eebc5c; font-weight: 700; font-size: 1.1em; padding: 0.5rem;">
                            ${product ? `‚ÇΩ ${(ing.qty * product.price).toFixed(2)}` : '‚Äî'}
                        </div>
                        
                        <button onclick="recipesModule.removeIngredient(${index})" 
                                style="padding: 0.5rem 0.75rem; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer;">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
     */
    addIngredient() {
        this.editingIngredients.push({
            id: null,
            name: '',
            qty: 0,
            unit: '–≥',
            k_evap: 0,
            k_trim: 0,
            k_wash: 0
        });
        this.renderIngredientsList();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
     */
    updateIngredient(index, field, value) {
        if (this.editingIngredients[index]) {
            this.editingIngredients[index][field] = value;
            
            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
            if (field === 'id') {
                const product = this.system.products.find(p => p.id === value);
                if (product) {
                    this.editingIngredients[index].name = product.name;
                    this.editingIngredients[index].unit = product.baseUnit;
                }
            }
            
            this.renderIngredientsList();
            this.calculateCost();
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
     */
    removeIngredient(index) {
        this.editingIngredients.splice(index, 1);
        this.renderIngredientsList();
        this.calculateCost();
    }

    /**
     * –†–∞—Å—á—ë—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
     */
    calculateCost() {
        let totalCost = 0;

        this.editingIngredients.forEach(ing => {
            if (!ing.id) return;
            
            const product = this.system.products.find(p => p.id === ing.id);
            if (product) {
                // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏
                const lossCoeff = 1 + (ing.k_evap || 0) / 100;
                const actualQty = ing.qty * lossCoeff;
                
                totalCost += actualQty * product.price;
            }
        });

        const costElement = document.getElementById('calculatedCost');
        if (costElement) {
            costElement.textContent = `‚ÇΩ ${totalCost.toFixed(2)}`;
        }

        return totalCost;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    saveRecipe(recipeId) {
        const code = document.getElementById('recipeCode').value.trim();
        const dishName = document.getElementById('recipeDishName').value.trim();
        const yieldOut = parseFloat(document.getElementById('recipeYield').value);
        const yieldUnit = document.getElementById('recipeYieldUnit').value;
        const version = document.getElementById('recipeVersion').value.trim();

        // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø
        if (window.inventoryValidator) {
            const validator = window.inventoryValidator;
            validator.clearErrors();
            
            validator.validateRequired(code, '–ö–æ–¥ –¢–ö');
            validator.validateRequired(dishName, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞');
            validator.validateQuantity(yieldOut, '–í—ã—Ö–æ–¥');
            
            if (this.editingIngredients.length === 0) {
                validator.addError('–°–æ—Å—Ç–∞–≤', '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç');
            }
            
            if (validator.hasErrors()) {
                validator.showErrors();
                return;
            }
        } else {
            // Fallback –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (!code || !dishName || !yieldOut) {
                alert('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∫–æ–¥, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –≤—ã—Ö–æ–¥');
                return;
            }

            if (this.editingIngredients.length === 0) {
                alert('‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç');
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
        const hasEmptyIngredients = this.editingIngredients.some(ing => !ing.id);
        if (hasEmptyIngredients) {
            alert('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫');
            return;
        }

        const costPrice = this.calculateCost();

        if (recipeId && recipeId !== 'null') {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
            const recipe = this.system.recipes.find(r => r.id === recipeId);
            if (recipe) {
                recipe.code = code;
                recipe.dishName = dishName;
                recipe.yieldOut = yieldOut;
                recipe.yieldUnit = yieldUnit;
                recipe.version = version;
                recipe.ingredients = [...this.editingIngredients];
                recipe.costPrice = costPrice;
                recipe.updatedAt = new Date().toISOString();
            }
        } else {
            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
            const newRecipe = {
                id: Date.now(),
                code,
                dishId: Date.now(), // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å–≤—è–∑—å —Å –±–ª—é–¥–æ–º
                dishName,
                version,
                yieldOut,
                yieldUnit,
                ingredients: [...this.editingIngredients],
                costPrice,
                createdAt: new Date().toISOString()
            };
            this.system.recipes.push(newRecipe);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        this.system.saveToLocalStorage('recipes', this.system.recipes);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        document.querySelector('.modal-overlay').remove();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        this.renderRecipesList();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('‚úÖ –¢–µ—Ö–∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
    }

    /**
     * –ö–∞–ª—å–∫—É–ª—è—Ü–∏—è —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    calculateRecipe(recipeId) {
        const recipe = this.system.recipes.find(r => r.id === recipeId);
        if (!recipe) return;

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        const costPrice = this.system.calculateRecipeCost(recipe);
        recipe.costPrice = costPrice;

        this.system.saveToLocalStorage('recipes', this.system.recipes);
        this.renderRecipesList();

        this.showNotification('üßÆ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞!', 'success');
    }

    /**
     * –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã
     */
    duplicateRecipe(recipeId) {
        const recipe = this.system.recipes.find(r => r.id === recipeId);
        if (!recipe) return;

        const newRecipe = {
            ...recipe,
            id: Date.now(),
            code: `${recipe.code}-COPY`,
            dishName: `${recipe.dishName} (–∫–æ–ø–∏—è)`,
            ingredients: recipe.ingredients.map(ing => ({ ...ing })),
            createdAt: new Date().toISOString()
        };

        this.system.recipes.push(newRecipe);
        this.system.saveToLocalStorage('recipes', this.system.recipes);

        this.renderRecipesList();
        this.showNotification('üìã –¢–µ—Ö–∫–∞—Ä—Ç–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10001;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            animation: slideIn 0.3s ease-out;
            ${type === 'success' ? 'background: #16a34a;' : ''}
            ${type === 'error' ? 'background: #dc2626;' : ''}
            ${type === 'info' ? 'background: #2563eb;' : ''}
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// Export
if (typeof module !== 'undefined' && module.exports) {
    module.exports = RecipesModule;
}

