/**
 * –ú–û–î–£–õ–¨ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
 * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, lazy loading, –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è
 */

class PerformanceOptimizer {
    constructor() {
        this.cache = new Map();
        this.cacheExpiry = 300000; // 5 –º–∏–Ω—É—Ç
        this.config = {
            enableCache: true,
            enableLazyLoading: true,
            enableImageOptimization: true,
            cdnUrl: 'https://cdn.yoursite.com' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à CDN
        };
        
        this.init();
    }

    init() {
        console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        if (this.config.enableLazyLoading) {
            this.initLazyLoading();
        }
        
        if (this.config.enableImageOptimization) {
            this.optimizeImages();
        }

        this.preloadCriticalResources();
        this.measurePerformance();
    }

    // ===== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï =====
    
    setCache(key, value, expiry = this.cacheExpiry) {
        if (!this.config.enableCache) return;

        this.cache.set(key, {
            value,
            expiresAt: Date.now() + expiry
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        try {
            localStorage.setItem(`cache_${key}`, JSON.stringify({
                value,
                expiresAt: Date.now() + expiry
            }));
        } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e);
        }
    }

    getCache(key) {
        if (!this.config.enableCache) return null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º in-memory cache
        let cached = this.cache.get(key);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        if (!cached) {
            try {
                const stored = localStorage.getItem(`cache_${key}`);
                if (stored) {
                    cached = JSON.parse(stored);
                    this.cache.set(key, cached);
                }
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage:', e);
            }
        }

        if (!cached) return null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if (Date.now() > cached.expiresAt) {
            this.cache.delete(key);
            localStorage.removeItem(`cache_${key}`);
            return null;
        }

        return cached.value;
    }

    clearCache() {
        this.cache.clear();
        
        // –û—á–∏—â–∞–µ–º localStorage
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith('cache_')) {
                localStorage.removeItem(key);
            }
        });

        console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
    }

    // ===== LAZY LOADING =====
    
    initLazyLoading() {
        if ('IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        
                        if (img.dataset.src) {
                            img.src = img.dataset.src;
                            img.removeAttribute('data-src');
                        }
                        
                        if (img.dataset.srcset) {
                            img.srcset = img.dataset.srcset;
                            img.removeAttribute('data-srcset');
                        }

                        observer.unobserve(img);
                    }
                });
            });

            // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å data-src
            document.querySelectorAll('img[data-src]').forEach(img => {
                observer.observe(img);
            });

            console.log('‚úÖ Lazy loading –≤–∫–ª—é—á–µ–Ω');
        }
    }

    // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
    
    optimizeImages() {
        const images = document.querySelectorAll('img');
        
        images.forEach(img => {
            // –î–æ–±–∞–≤–ª—è–µ–º loading="lazy" –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            if (!img.hasAttribute('loading')) {
                img.loading = 'lazy';
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º WebP –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if (this.supportsWebP() && img.src.match(/\.(jpg|jpeg|png)$/i)) {
                const webpUrl = img.src.replace(/\.(jpg|jpeg|png)$/i, '.webp');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ WebP –≤–µ—Ä—Å–∏–∏
                this.checkImageExists(webpUrl).then(exists => {
                    if (exists) {
                        img.src = webpUrl;
                    }
                });
            }
        });
    }

    supportsWebP() {
        const elem = document.createElement('canvas');
        if (elem.getContext && elem.getContext('2d')) {
            return elem.toDataURL('image/webp').indexOf('data:image/webp') === 0;
        }
        return false;
    }

    async checkImageExists(url) {
        try {
            const response = await fetch(url, { method: 'HEAD' });
            return response.ok;
        } catch {
            return false;
        }
    }

    // ===== –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê =====
    
    preloadCriticalResources() {
        const criticalResources = [
            '/api/menu',
            '/api/categories',
            '/assets/brand/logo.png'
        ];

        criticalResources.forEach(url => {
            const link = document.createElement('link');
            link.rel = 'preload';
            link.as = url.endsWith('.png') ? 'image' : 'fetch';
            link.href = url;
            document.head.appendChild(link);
        });

        console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    // ===== CDN =====
    
    getCDNUrl(path) {
        if (!this.config.cdnUrl) return path;
        
        // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /assets/, –∏—Å–ø–æ–ª—å–∑—É–µ–º CDN
        if (path.startsWith('/assets/')) {
            return this.config.cdnUrl + path;
        }
        
        return path;
    }

    // ===== –ò–ó–ú–ï–†–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò =====
    
    measurePerformance() {
        if ('performance' in window) {
            window.addEventListener('load', () => {
                const perfData = performance.getEntriesByType('navigation')[0];
                
                const metrics = {
                    dns: perfData.domainLookupEnd - perfData.domainLookupStart,
                    tcp: perfData.connectEnd - perfData.connectStart,
                    request: perfData.responseStart - perfData.requestStart,
                    response: perfData.responseEnd - perfData.responseStart,
                    dom: perfData.domComplete - perfData.domLoading,
                    load: perfData.loadEventEnd - perfData.loadEventStart
                };

                console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', metrics);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                this.sendMetrics(metrics);
            });
        }
    }

    async sendMetrics(metrics) {
        try {
            await fetch('/api/metrics', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(metrics)
            });
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
        }
    }

    // ===== –î–ï–ë–ê–£–ù–°–ò–ù–ì –ò –¢–†–û–¢–¢–õ–ò–ù–ì =====
    
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }

    // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø API –ó–ê–ü–†–û–°–û–í =====
    
    async cachedFetch(url, options = {}) {
        const cacheKey = `fetch_${url}`;
        const cached = this.getCache(cacheKey);

        if (cached) {
            console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞: ${url}`);
            return cached;
        }

        try {
            const response = await fetch(url, options);
            const data = await response.json();

            this.setCache(cacheKey, data);
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
            throw error;
        }
    }

    // ===== –ú–ò–ù–ò–§–ò–ö–ê–¶–ò–Ø HTML =====
    
    minifyHTML(html) {
        return html
            .replace(/\s+/g, ' ')
            .replace(/>\s+</g, '><')
            .trim();
    }

    // ===== DASHBOARD =====
    
    showPerformanceDashboard() {
        const perfData = performance.getEntriesByType('navigation')[0];
        const memory = performance.memory;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 600px;">
                <h2>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h2>

                <div style="margin-bottom: 20px;">
                    <h3>üöÄ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                    <div class="perf-bar" style="background: #e5e7eb; border-radius: 8px; overflow: hidden; margin-bottom: 10px;">
                        <div style="background: linear-gradient(90deg, #10b981, #059669); height: 40px; width: ${Math.min((perfData.loadEventEnd / 5000) * 100, 100)}%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">
                            ${(perfData.loadEventEnd / 1000).toFixed(2)}s
                        </div>
                    </div>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 20px;">
                    <div class="stat-box" style="background: #f0f9ff; padding: 15px; border-radius: 8px;">
                        <div style="font-size: 20px; font-weight: bold; color: #0369a1;">
                            ${this.cache.size}
                        </div>
                        <div style="color: #666;">–ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ</div>
                    </div>
                    <div class="stat-box" style="background: #fef3c7; padding: 15px; border-radius: 8px;">
                        <div style="font-size: 20px; font-weight: bold; color: #92400e;">
                            ${memory ? (memory.usedJSHeapSize / 1048576).toFixed(1) : 'N/A'} MB
                        </div>
                        <div style="color: #666;">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏</div>
                    </div>
                </div>

                <div style="margin-bottom: 20px;">
                    <h3>üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</h3>
                    <ul style="list-style: none; padding: 0;">
                        <li style="padding: 8px; background: #f9fafb; margin-bottom: 5px; border-radius: 4px;">
                            DNS: <strong>${(perfData.domainLookupEnd - perfData.domainLookupStart).toFixed(0)}ms</strong>
                        </li>
                        <li style="padding: 8px; background: #f9fafb; margin-bottom: 5px; border-radius: 4px;">
                            –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: <strong>${(perfData.connectEnd - perfData.connectStart).toFixed(0)}ms</strong>
                        </li>
                        <li style="padding: 8px; background: #f9fafb; margin-bottom: 5px; border-radius: 4px;">
                            –ó–∞–ø—Ä–æ—Å: <strong>${(perfData.responseStart - perfData.requestStart).toFixed(0)}ms</strong>
                        </li>
                        <li style="padding: 8px; background: #f9fafb; margin-bottom: 5px; border-radius: 4px;">
                            –û—Ç–≤–µ—Ç: <strong>${(perfData.responseEnd - perfData.responseStart).toFixed(0)}ms</strong>
                        </li>
                        <li style="padding: 8px; background: #f9fafb; margin-bottom: 5px; border-radius: 4px;">
                            DOM: <strong>${(perfData.domComplete - perfData.domLoading).toFixed(0)}ms</strong>
                        </li>
                    </ul>
                </div>

                <div style="display: flex; gap: 10px;">
                    <button class="btn btn-primary" onclick="performanceOptimizer.clearCache(); alert('–ö—ç—à –æ—á–∏—â–µ–Ω!');">
                        –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
                    </button>
                    <button class="btn" onclick="this.closest('.modal-overlay').remove()">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.PerformanceOptimizer = PerformanceOptimizer;
window.performanceOptimizer = new PerformanceOptimizer();
