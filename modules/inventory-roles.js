/**
 * DANDY Inventory System - Roles & Permissions Module
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
 */

class RolesModule {
    constructor(system) {
        this.system = system;
        this.currentUser = this.loadCurrentUser();
        this.roles = this.loadRoles();
    }

    loadCurrentUser() {
        const saved = localStorage.getItem('dandy_current_user');
        return saved ? JSON.parse(saved) : {
            id: 1,
            name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            role: 'admin',
            permissions: ['all']
        };
    }

    saveCurrentUser() {
        localStorage.setItem('dandy_current_user', JSON.stringify(this.currentUser));
    }

    loadRoles() {
        return {
            // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
            admin: {
                name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                permissions: ['all'],
                description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º'
            },

            // –¢–µ—Ö–Ω–æ–ª–æ–≥ - —Ç–µ—Ö–∫–∞—Ä—Ç—ã –∏ —Ä–µ—Ü–µ–ø—Ç—ã
            technologist: {
                name: '–¢–µ—Ö–Ω–æ–ª–æ–≥',
                permissions: [
                    'recipes.read',
                    'recipes.create',
                    'recipes.update',
                    'recipes.delete',
                    'nomenclature.read',
                    'reports.read'
                ],
                description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏'
            },

            // –ó–∞–≤—Å–∫–ª–∞–¥ - —Å–∫–ª–∞–¥ –∏ –ø—Ä–∏—Ö–æ–¥
            warehouse_manager: {
                name: '–ó–∞–≤—Å–∫–ª–∞–¥',
                permissions: [
                    'warehouse.read',
                    'warehouse.create',
                    'warehouse.update',
                    'warehouse.delete',
                    'nomenclature.read',
                    'inventory.read',
                    'inventory.create',
                    'reports.read'
                ],
                description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º –∏ –ø—Ä–∏—Ö–æ–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤'
            },

            // –ë–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä - –±–∞—Ä –∏ —Ä–∞–∑–ª–∏–≤
            bar_manager: {
                name: '–ë–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä',
                permissions: [
                    'bar.read',
                    'bar.create',
                    'bar.update',
                    'bar.delete',
                    'egais.read',
                    'egais.create',
                    'nomenclature.read',
                    'reports.read'
                ],
                description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ä–æ–º –∏ –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π'
            },

            // –®–µ—Ñ-–ø–æ–≤–∞—Ä - –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            chef: {
                name: '–®–µ—Ñ-–ø–æ–≤–∞—Ä',
                permissions: [
                    'production.read',
                    'production.create',
                    'production.update',
                    'recipes.read',
                    'nomenclature.read',
                    'reports.read'
                ],
                description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏ –∫—É—Ö–Ω–µ–π'
            },

            // –ë—É—Ö–≥–∞–ª—Ç–µ—Ä - –æ—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            accountant: {
                name: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä/—ç–∫–æ–Ω–æ–º–∏—Å—Ç',
                permissions: [
                    'reports.read',
                    'reports.export',
                    'nomenclature.read',
                    'warehouse.read',
                    'inventory.read',
                    'settings.read'
                ],
                description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
            },

            // –ö–∞—Å—Å–∏—Ä - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏
            cashier: {
                name: '–ö–∞—Å—Å–∏—Ä',
                permissions: [
                    'sales.create',
                    'nomenclature.read'
                ],
                description: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂'
            },

            // –ê—É–¥–∏—Ç–æ—Ä - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
            auditor: {
                name: '–ê—É–¥–∏—Ç–æ—Ä',
                permissions: [
                    'nomenclature.read',
                    'warehouse.read',
                    'production.read',
                    'bar.read',
                    'inventory.read',
                    'reports.read',
                    'settings.read',
                    'audit.read'
                ],
                description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
            }
        };
    }

    hasPermission(permission) {
        // –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
        if (this.currentUser.permissions.includes('all')) {
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        return this.currentUser.permissions.includes(permission);
    }

    checkAccess(module, action = 'read') {
        const permission = `${module}.${action}`;
        
        if (!this.hasPermission(permission)) {
            this.showAccessDenied(permission);
            return false;
        }
        
        return true;
    }

    showAccessDenied(permission) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; padding: 2rem; border-radius: 12px; max-width: 400px; text-align: center; border: 1px solid var(--chip-border);">
                <div style="font-size: 4rem; margin-bottom: 1rem;">üö´</div>
                <h2 style="color: #eebc5c; margin: 0 0 1rem 0;">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</h2>
                <p style="color: var(--text-light); margin-bottom: 1rem;">
                    –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
                </p>
                <p style="color: var(--text-light); opacity: 0.7; font-size: 0.85rem; margin-bottom: 1.5rem;">
                    –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: <strong>${permission}</strong><br>
                    –í–∞—à–∞ —Ä–æ–ª—å: <strong>${this.currentUser.role}</strong>
                </p>
                <button onclick="this.closest('[style*=fixed]').remove()" class="btn-primary" style="width: 100%;">
                    –ü–æ–Ω—è—Ç–Ω–æ
                </button>
            </div>
        `;

        document.body.appendChild(modal);

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞
        this.system.addAuditLog('access_denied', {
            user: this.currentUser.name,
            role: this.currentUser.role,
            permission: permission
        });
    }

    switchUser(userId) {
        const users = this.getUsers();
        const user = users.find(u => u.id === userId);
        
        if (user) {
            const rolePermissions = this.roles[user.role];
            this.currentUser = {
                ...user,
                permissions: rolePermissions ? rolePermissions.permissions : []
            };
            this.saveCurrentUser();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUserDisplay();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            alert(`–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: ${user.name} (${rolePermissions.name})`);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥
            this.system.addAuditLog('user_switched', {
                user: user.name,
                role: user.role
            });
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤
            location.reload();
        }
    }

    getUsers() {
        const saved = localStorage.getItem('dandy_users');
        if (saved) {
            return JSON.parse(saved);
        }

        // –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const demoUsers = [
            { id: 1, name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', role: 'admin', email: 'admin@dandy.ru' },
            { id: 2, name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', role: 'warehouse_manager', email: 'warehouse@dandy.ru' },
            { id: 3, name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', role: 'technologist', email: 'tech@dandy.ru' },
            { id: 4, name: '–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤', role: 'bar_manager', email: 'bar@dandy.ru' },
            { id: 5, name: '–ï–ª–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞', role: 'chef', email: 'chef@dandy.ru' },
            { id: 6, name: '–û–ª—å–≥–∞ –ü–æ–ø–æ–≤–∞', role: 'accountant', email: 'account@dandy.ru' },
            { id: 7, name: '–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤', role: 'cashier', email: 'cashier@dandy.ru' },
            { id: 8, name: '–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞', role: 'auditor', email: 'auditor@dandy.ru' }
        ];

        localStorage.setItem('dandy_users', JSON.stringify(demoUsers));
        return demoUsers;
    }

    updateUserDisplay() {
        const userDisplay = document.getElementById('currentUser');
        if (userDisplay) {
            userDisplay.textContent = `üë§ ${this.currentUser.name}`;
        }
    }

    renderRoleSelector() {
        const users = this.getUsers();
        
        const html = `
            <div style="padding: 1rem; background: rgba(255,255,255,0.05); border-radius: 8px; border: 1px solid var(--chip-border);">
                <h4 style="color: var(--text-light); margin-top: 0;">üîê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ–º–æ)</h4>
                <p style="color: var(--text-light); opacity: 0.8; font-size: 0.9rem;">–¢–µ–∫—É—â–∏–π: <strong>${this.currentUser.name}</strong> (${this.roles[this.currentUser.role].name})</p>
                
                <select id="userSelector" class="form-select" style="margin-bottom: 1rem;">
                    ${users.map(u => `
                        <option value="${u.id}" ${u.id === this.currentUser.id ? 'selected' : ''}>
                            ${u.name} ‚Äî ${this.roles[u.role].name}
                        </option>
                    `).join('')}
                </select>

                <button onclick="rolesModule.switchUser(parseInt(document.getElementById('userSelector').value))" class="btn-primary" style="width: 100%;">
                    ‚úì –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
                </button>

                <div style="margin-top: 1.5rem;">
                    <strong style="color: var(--text-light);">–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞:</strong>
                    <ul style="color: var(--text-light); opacity: 0.9; font-size: 0.85rem; margin: 0.5rem 0; padding-left: 1.5rem;">
                        ${this.currentUser.permissions.includes('all') 
                            ? '<li>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º</li>' 
                            : this.currentUser.permissions.map(p => `<li>${p}</li>`).join('')
                        }
                    </ul>
                </div>
            </div>
        `;

        return html;
    }

    applyRestrictions() {
        // –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±—ã
        const tabs = document.querySelectorAll('.tab');
        tabs.forEach(tab => {
            const page = tab.getAttribute('data-page');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—é
            if (!this.hasPermission('all')) {
                const hasAccess = this.hasPermission(`${page}.read`);
                
                if (!hasAccess) {
                    tab.style.opacity = '0.3';
                    tab.style.pointerEvents = 'none';
                    tab.title = '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é';
                }
            }
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∞–≤
        if (!this.hasPermission('all')) {
            const createButtons = document.querySelectorAll('[onclick*="create"]');
            createButtons.forEach(btn => {
                const module = this.detectModule(btn);
                if (module && !this.hasPermission(`${module}.create`)) {
                    btn.style.display = 'none';
                }
            });

            const editButtons = document.querySelectorAll('[onclick*="edit"]');
            editButtons.forEach(btn => {
                const module = this.detectModule(btn);
                if (module && !this.hasPermission(`${module}.update`)) {
                    btn.style.display = 'none';
                }
            });

            const deleteButtons = document.querySelectorAll('[onclick*="delete"]');
            deleteButtons.forEach(btn => {
                const module = this.detectModule(btn);
                if (module && !this.hasPermission(`${module}.delete`)) {
                    btn.style.display = 'none';
                }
            });
        }

        console.log('üîê Role restrictions applied for:', this.currentUser.role);
    }

    detectModule(element) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        const pageContent = element.closest('[id*="page-content"], .page-content');
        if (pageContent) {
            return pageContent.id || pageContent.getAttribute('data-page');
        }
        return null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
if (typeof window !== 'undefined') {
    window.RolesModule = RolesModule;
}

