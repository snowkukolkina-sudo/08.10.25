/**
 * –ú–æ–¥—É–ª—å –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * –†–∞–±–æ—Ç–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */

class OfflineModule {
    constructor() {
        this.isOnline = navigator.onLine;
        this.syncQueue = [];
        this.localStorage = new Map();
        this.syncInterval = null;
        this.init();
    }

    init() {
        this.loadSyncQueue();
        this.setupEventListeners();
        this.startSyncInterval();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        window.addEventListener('online', () => {
            this.isOnline = true;
            this.onNetworkOnline();
        });

        window.addEventListener('offline', () => {
            this.isOnline = false;
            this.onNetworkOffline();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.saveSyncQueue();
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
    async onNetworkOnline() {
        console.log('–°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', '–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...', 'success');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await this.syncAll();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        this.updateOnlineStatus(true);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–µ—Ç–∏
    onNetworkOffline() {
        console.log('–°–µ—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–ù–µ—Ç —Å–µ—Ç–∏', '–†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ', 'warning');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        this.updateOnlineStatus(false);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    updateOnlineStatus(isOnline) {
        const statusElement = document.getElementById('network-status');
        if (statusElement) {
            statusElement.textContent = isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω';
            statusElement.className = isOnline ? 'status-online' : 'status-offline';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        const iconElement = document.getElementById('network-icon');
        if (iconElement) {
            iconElement.textContent = isOnline ? 'üü¢' : 'üî¥';
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    addToSyncQueue(operation) {
        const syncItem = {
            id: this.generateSyncId(),
            operation: operation.type,
            data: operation.data,
            timestamp: new Date().toISOString(),
            retryCount: 0,
            maxRetries: 3
        };

        this.syncQueue.push(syncItem);
        this.saveSyncQueue();

        console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncItem);
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    async syncAll() {
        if (!this.isOnline || this.syncQueue.length === 0) {
            return;
        }

        console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${this.syncQueue.length} –æ–ø–µ—Ä–∞—Ü–∏–π...`);

        const successful = [];
        const failed = [];

        for (const item of this.syncQueue) {
            try {
                const result = await this.syncItem(item);
                if (result.success) {
                    successful.push(item);
                } else {
                    failed.push(item);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
                failed.push(item);
            }
        }

        // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        this.syncQueue = failed;
        this.saveSyncQueue();

        if (successful.length > 0) {
            this.showNotification(
                '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 
                `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${successful.length} –æ–ø–µ—Ä–∞—Ü–∏–π`, 
                'success'
            );
        }

        if (failed.length > 0) {
            this.showNotification(
                '–û—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 
                `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${failed.length} –æ–ø–µ—Ä–∞—Ü–∏–π`, 
                'error'
            );
        }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    async syncItem(item) {
        try {
            switch (item.operation) {
                case 'receipt':
                    return await this.syncReceipt(item.data);
                case 'order':
                    return await this.syncOrder(item.data);
                case 'payment':
                    return await this.syncPayment(item.data);
                case 'refund':
                    return await this.syncRefund(item.data);
                case 'user_action':
                    return await this.syncUserAction(item.data);
                default:
                    return { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è' };
            }
        } catch (error) {
            return { success: false, error: error.message };
        }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ–∫–∞
    async syncReceipt(receiptData) {
        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await this.sendToServer('/api/receipts', {
            method: 'POST',
            body: JSON.stringify(receiptData)
        });

        return response;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
    async syncOrder(orderData) {
        const response = await this.sendToServer('/api/orders', {
            method: 'POST',
            body: JSON.stringify(orderData)
        });

        return response;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
    async syncPayment(paymentData) {
        const response = await this.sendToServer('/api/payments', {
            method: 'POST',
            body: JSON.stringify(paymentData)
        });

        return response;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    async syncRefund(refundData) {
        const response = await this.sendToServer('/api/refunds', {
            method: 'POST',
            body: JSON.stringify(refundData)
        });

        return response;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async syncUserAction(actionData) {
        const response = await this.sendToServer('/api/user-actions', {
            method: 'POST',
            body: JSON.stringify(actionData)
        });

        return response;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async sendToServer(url, options) {
        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        return new Promise((resolve) => {
            setTimeout(() => {
                // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                resolve({ success: true, data: { id: Date.now() } });
            }, 1000);
        });
    }

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    storeLocally(key, data) {
        this.localStorage.set(key, {
            data: data,
            timestamp: new Date().toISOString(),
            synced: false
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB –∏–ª–∏ localStorage
        this.saveToStorage(key, data);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    getLocally(key) {
        const item = this.localStorage.get(key);
        return item ? item.data : null;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB
    async saveToStorage(key, data) {
        try {
            if ('indexedDB' in window) {
                const db = await this.openIndexedDB();
                const transaction = db.transaction(['offlineData'], 'readwrite');
                const store = transaction.objectStore('offlineData');
                await store.put({ key: key, data: data, timestamp: new Date().toISOString() });
            } else {
                // Fallback –Ω–∞ localStorage
                localStorage.setItem(`offline_${key}`, JSON.stringify(data));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error);
        }
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ IndexedDB
    async openIndexedDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open('DandyPOSOffline', 1);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains('offlineData')) {
                    db.createObjectStore('offlineData', { keyPath: 'key' });
                }
            };
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    loadSyncQueue() {
        const saved = localStorage.getItem('syncQueue');
        if (saved) {
            this.syncQueue = JSON.parse(saved);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    saveSyncQueue() {
        localStorage.setItem('syncQueue', JSON.stringify(this.syncQueue));
    }

    // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    startSyncInterval() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.syncInterval = setInterval(() => {
            if (this.isOnline && this.syncQueue.length > 0) {
                this.syncAll();
            }
        }, 30000);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    stopSyncInterval() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    getSyncStatus() {
        return {
            isOnline: this.isOnline,
            queueLength: this.syncQueue.length,
            lastSync: this.getLastSyncTime()
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    getLastSyncTime() {
        const lastSync = localStorage.getItem('lastSync');
        return lastSync ? new Date(lastSync) : null;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    updateLastSyncTime() {
        localStorage.setItem('lastSync', new Date().toISOString());
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(title, message, type = 'info') {
        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-title">${title}</div>
            <div class="notification-message">${message}</div>
        `;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ DOM
        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    generateSyncId() {
        return `sync_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    }

    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    clearLocalData() {
        this.localStorage.clear();
        this.syncQueue = [];
        this.saveSyncQueue();
        
        // –û—á–∏—Å—Ç–∫–∞ IndexedDB
        if ('indexedDB' in window) {
            indexedDB.deleteDatabase('DandyPOSOffline');
        }
        
        // –û—á–∏—Å—Ç–∫–∞ localStorage
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith('offline_')) {
                localStorage.removeItem(key);
            }
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    getOfflineStats() {
        return {
            isOnline: this.isOnline,
            syncQueueLength: this.syncQueue.length,
            localDataSize: this.localStorage.size,
            lastSync: this.getLastSyncTime(),
            uptime: this.getUptime()
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
    getUptime() {
        const startTime = localStorage.getItem('sessionStart');
        if (startTime) {
            return Date.now() - new Date(startTime).getTime();
        }
        return 0;
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
    startSession() {
        localStorage.setItem('sessionStart', new Date().toISOString());
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    endSession() {
        localStorage.removeItem('sessionStart');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
window.OfflineModule = OfflineModule;
