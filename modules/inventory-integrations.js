/**
 * DANDY Inventory ‚Äî –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
 * 1–°, r_keeper, –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç
 */

class IntegrationsModule {
    constructor(inventorySystem) {
        this.system = inventorySystem;
        this.integrations = {
            oneC: { enabled: false, lastSync: null, status: 'disconnected' },
            rkeeper: { enabled: false, lastSync: null, status: 'disconnected' },
            kontur: { enabled: false, lastSync: null, status: 'disconnected' }
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log('üîÑ Integrations module initialized');
        this.renderIntegrationStatus();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
     */
    renderIntegrationStatus() {
        // –°—Ç–∞—Ç—É—Å—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ HTML
    }

    // ========== 1–° –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==========

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 1–°
     */
    setup1C() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); border-radius: 16px; padding: 2rem; max-width: 700px; width: 90%; max-height: 90vh; overflow-y: auto;">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 1–°</h2>

                <div class="alert alert-info">
                    <span>‚ÑπÔ∏è</span>
                    <div>
                        <strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏:</strong><br>
                        ‚Ä¢ 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ 8.3<br>
                        ‚Ä¢ 1–°:–û–±—â–µ–ø–∏—Ç<br>
                        ‚Ä¢ 1–°:–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π<br>
                        <strong>–ü—Ä–æ—Ç–æ–∫–æ–ª—ã:</strong> CommerceML 2.0, OData, HTTP-—Å–µ—Ä–≤–∏—Å—ã
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">URL —Å–µ—Ä–≤–µ—Ä–∞ 1–°*</label>
                    <input type="text" class="form-input" id="onec_url" placeholder="http://192.168.1.100/–£–¢/odata/standard.odata">
                </div>

                <div class="form-group">
                    <label class="form-label">–õ–æ–≥–∏–Ω*</label>
                    <input type="text" class="form-input" id="onec_login" placeholder="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä">
                </div>

                <div class="form-group">
                    <label class="form-label">–ü–∞—Ä–æ–ª—å*</label>
                    <input type="password" class="form-input" id="onec_password">
                </div>

                <div class="form-group">
                    <label class="form-label">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</label>
                    <input type="text" class="form-input" id="onec_database" placeholder="–£–¢" value="–£–¢">
                </div>

                <div class="form-group">
                    <label class="form-label">–¢–∏–ø –æ–±–º–µ–Ω–∞</label>
                    <select class="form-select" id="onec_exchange_type">
                        <option value="commerceml">CommerceML 2.0</option>
                        <option value="odata">OData</option>
                        <option value="http">HTTP-—Å–µ—Ä–≤–∏—Å—ã</option>
                    </select>
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center; gap: 0.5rem;">
                        <input type="checkbox" id="onec_auto_sync">
                        <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç</span>
                    </label>
                </div>

                <div style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); color: #F3EADB; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; border-left: 4px solid #f59e0b;">
                    <strong>‚ö†Ô∏è –ß—Ç–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è:</strong>
                    <ul style="margin: 0.5rem 0 0 1.5rem;">
                        <li>–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ (—Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏)</li>
                        <li>–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã (–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏, –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏)</li>
                        <li>–î–æ–∫—É–º–µ–Ω—Ç—ã (–ø—Ä–∏—Ö–æ–¥, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ)</li>
                        <li>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö</li>
                        <li>–¶–µ–Ω—ã</li>
                    </ul>
                </div>

                <div style="display: flex; gap: 1rem;">
                    <button onclick="integrationsModule.test1CConnection()" class="btn btn-secondary">
                        üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    </button>
                    <button onclick="integrationsModule.save1CSettings()" class="btn btn-primary">
                        ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°
     */
    test1CConnection() {
        const url = document.getElementById('onec_url').value.trim();
        const login = document.getElementById('onec_login').value.trim();
        const password = document.getElementById('onec_password').value;

        if (!url || !login || !password) {
            alert('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        this.showNotification('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°...', 'info');

        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –∑–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å –∫ 1–°
            const success = Math.random() > 0.3; // 70% —É—Å–ø–µ—Ö
            
            if (success) {
                this.showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° —É—Å–ø–µ—à–Ω–æ!', 'success');
            } else {
                this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 'error');
            }
        }, 2000);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ 1–°
     */
    save1CSettings() {
        const settings = {
            url: document.getElementById('onec_url').value.trim(),
            login: document.getElementById('onec_login').value.trim(),
            password: document.getElementById('onec_password').value,
            database: document.getElementById('onec_database').value.trim(),
            exchangeType: document.getElementById('onec_exchange_type').value,
            autoSync: document.getElementById('onec_auto_sync').checked
        };

        if (!settings.url || !settings.login || !settings.password) {
            alert('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        this.system.saveToLocalStorage('onec_settings', settings);
        this.integrations.oneC.enabled = true;
        this.integrations.oneC.status = 'connected';

        document.querySelector('.modal-overlay').remove();
        this.showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ 1–° —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        this.renderIntegrationStatus();
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å 1–°
     */
    sync1C() {
        if (!this.integrations.oneC.enabled) {
            alert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å 1–°');
            return;
        }

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); border-radius: 16px; padding: 2rem; max-width: 600px; width: 90%;">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å 1–°</h2>

                <div style="text-align: center; padding: 2rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">‚è≥</div>
                    <p style="font-size: 1.1em; color: #666;">
                        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å 1–°...<br>
                        –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
                    </p>
                    <div style="background: #e5e7eb; height: 8px; border-radius: 4px; margin-top: 1rem; overflow: hidden;">
                        <div id="sync_progress" style="background: var(--dandy-green); height: 100%; width: 0%; transition: width 0.5s;"></div>
                    </div>
                    <div id="sync_status" style="margin-top: 1rem; color: #666;">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã...</div>
                </div>

                <div style="display: flex; justify-content: center;">
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const steps = [
            { progress: 20, status: '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã...' },
            { progress: 40, status: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...' },
            { progress: 60, status: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...' },
            { progress: 80, status: '–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤...' },
            { progress: 100, status: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ!' }
        ];

        let currentStep = 0;
        const interval = setInterval(() => {
            if (currentStep < steps.length) {
                document.getElementById('sync_progress').style.width = steps[currentStep].progress + '%';
                document.getElementById('sync_status').textContent = steps[currentStep].status;
                currentStep++;
            } else {
                clearInterval(interval);
                setTimeout(() => {
                    modal.remove();
                    this.integrations.oneC.lastSync = new Date().toISOString();
                    this.showNotification('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å 1–° –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success');
                    this.renderIntegrationStatus();
                }, 500);
            }
        }, 1000);
    }

    // ========== R_KEEPER –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==========

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å r_keeper
     */
    setupRKeeper() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); border-radius: 16px; padding: 2rem; max-width: 700px; width: 90%; max-height: 90vh; overflow-y: auto;">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">üçΩÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å r_keeper</h2>

                <div class="alert alert-info">
                    <span>‚ÑπÔ∏è</span>
                    <div>
                        <strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏:</strong><br>
                        ‚Ä¢ r_keeper 7<br>
                        ‚Ä¢ UCS r_keeper<br>
                        <strong>–û–±–º–µ–Ω:</strong> CSV, XML, REST API
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ r_keeper*</label>
                    <input type="text" class="form-input" id="rk_host" placeholder="192.168.1.50">
                </div>

                <div class="form-group">
                    <label class="form-label">–ü–æ—Ä—Ç*</label>
                    <input type="number" class="form-input" id="rk_port" placeholder="8080" value="8080">
                </div>

                <div class="form-group">
                    <label class="form-label">–õ–æ–≥–∏–Ω*</label>
                    <input type="text" class="form-input" id="rk_login" placeholder="admin">
                </div>

                <div class="form-group">
                    <label class="form-label">–ü–∞—Ä–æ–ª—å*</label>
                    <input type="password" class="form-input" id="rk_password">
                </div>

                <div class="form-group">
                    <label class="form-label">–§–æ—Ä–º–∞—Ç –æ–±–º–µ–Ω–∞</label>
                    <select class="form-select" id="rk_format">
                        <option value="csv">CSV</option>
                        <option value="xml">XML</option>
                        <option value="api">REST API</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">–ü–∞–ø–∫–∞ –æ–±–º–µ–Ω–∞ (–¥–ª—è CSV/XML)</label>
                    <input type="text" class="form-input" id="rk_folder" placeholder="C:\\RKeeper\\Exchange">
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center; gap: 0.5rem;">
                        <input type="checkbox" id="rk_auto_import">
                        <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∂ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç</span>
                    </label>
                </div>

                <div style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); color: #F3EADB; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; border-left: 4px solid #f59e0b;">
                    <strong>‚ö†Ô∏è –ß—Ç–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è:</strong>
                    <ul style="margin: 0.5rem 0 0 1.5rem;">
                        <li>–ú–µ–Ω—é –∏ –±–ª—é–¥–∞</li>
                        <li>–ü—Ä–æ–¥–∞–∂–∏ –∏ —á–µ–∫–∏</li>
                        <li>–°–ø–∏—Å–∞–Ω–∏—è –ø–æ –±–ª—é–¥–∞–º</li>
                        <li>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã</li>
                    </ul>
                </div>

                <div style="display: flex; gap: 1rem;">
                    <button onclick="integrationsModule.testRKeeperConnection()" class="btn btn-secondary">
                        üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    </button>
                    <button onclick="integrationsModule.saveRKeeperSettings()" class="btn btn-primary">
                        ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ r_keeper
     */
    testRKeeperConnection() {
        this.showNotification('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ r_keeper...', 'info');

        setTimeout(() => {
            const success = Math.random() > 0.3;
            if (success) {
                this.showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ r_keeper —É—Å–ø–µ—à–Ω–æ!', 'success');
            } else {
                this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 'error');
            }
        }, 2000);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ r_keeper
     */
    saveRKeeperSettings() {
        const settings = {
            host: document.getElementById('rk_host').value.trim(),
            port: document.getElementById('rk_port').value,
            login: document.getElementById('rk_login').value.trim(),
            password: document.getElementById('rk_password').value,
            format: document.getElementById('rk_format').value,
            folder: document.getElementById('rk_folder').value.trim(),
            autoImport: document.getElementById('rk_auto_import').checked
        };

        if (!settings.host || !settings.port || !settings.login || !settings.password) {
            alert('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        this.system.saveToLocalStorage('rkeeper_settings', settings);
        this.integrations.rkeeper.enabled = true;
        this.integrations.rkeeper.status = 'connected';

        document.querySelector('.modal-overlay').remove();
        this.showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ r_keeper —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        this.renderIntegrationStatus();
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∂ –∏–∑ r_keeper
     */
    importSalesFromRKeeper() {
        if (!this.integrations.rkeeper.enabled) {
            alert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å r_keeper');
            return;
        }

        this.showNotification('üì• –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∂ –∏–∑ r_keeper...', 'info');

        setTimeout(() => {
            this.integrations.rkeeper.lastSync = new Date().toISOString();
            this.showNotification('‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 142 –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è!', 'success');
            this.renderIntegrationStatus();
        }, 2000);
    }

    // ========== –ö–û–ù–¢–£–†.–ú–ê–†–ö–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==========

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç
     */
    setupKontur() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); border-radius: 16px; padding: 2rem; max-width: 700px; width: 90%; max-height: 90vh; overflow-y: auto;">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">üõí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç</h2>

                <div class="alert alert-info">
                    <span>‚ÑπÔ∏è</span>
                    <div>
                        <strong>–ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç</strong> ‚Äî —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –∑–∞–∫—É–ø–æ–∫<br>
                        <strong>API:</strong> REST API v3
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">API Key*</label>
                    <input type="text" class="form-input" id="kontur_api_key" placeholder="XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX">
                </div>

                <div class="form-group">
                    <label class="form-label">ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏*</label>
                    <input type="text" class="form-input" id="kontur_org_id" placeholder="12345678">
                </div>

                <div class="form-group">
                    <label class="form-label">–°–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</label>
                    <select class="form-select" id="kontur_warehouse">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                        ${this.system.warehouses.map(wh => `
                            <option value="${wh.id}">${wh.name}</option>
                        `).join('')}
                    </select>
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center; gap: 0.5rem;">
                        <input type="checkbox" id="kontur_auto_orders">
                        <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 1 —á–∞—Å</span>
                    </label>
                </div>

                <div style="background: rgba(245, 158, 11, 0.1); border: 1px solid rgba(245, 158, 11, 0.3); color: #F3EADB; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; border-left: 4px solid #f59e0b;">
                    <strong>‚ö†Ô∏è –ß—Ç–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è:</strong>
                    <ul style="margin: 0.5rem 0 0 1.5rem;">
                        <li>–ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º</li>
                        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Ö–æ–¥–∞</li>
                        <li>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</li>
                        <li>–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤</li>
                    </ul>
                </div>

                <div style="display: flex; gap: 1rem;">
                    <button onclick="integrationsModule.testKonturConnection()" class="btn btn-secondary">
                        üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    </button>
                    <button onclick="integrationsModule.saveKonturSettings()" class="btn btn-primary">
                        ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç
     */
    testKonturConnection() {
        this.showNotification('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç...', 'info');

        setTimeout(() => {
            const success = Math.random() > 0.3;
            if (success) {
                this.showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ!', 'success');
            } else {
                this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API Key.', 'error');
            }
        }, 2000);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç
     */
    saveKonturSettings() {
        const settings = {
            apiKey: document.getElementById('kontur_api_key').value.trim(),
            orgId: document.getElementById('kontur_org_id').value.trim(),
            warehouseId: parseInt(document.getElementById('kontur_warehouse').value),
            autoOrders: document.getElementById('kontur_auto_orders').checked
        };

        if (!settings.apiKey || !settings.orgId) {
            alert('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        this.system.saveToLocalStorage('kontur_settings', settings);
        this.integrations.kontur.enabled = true;
        this.integrations.kontur.status = 'connected';

        document.querySelector('.modal-overlay').remove();
        this.showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        this.renderIntegrationStatus();
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç
     */
    importOrdersFromKontur() {
        if (!this.integrations.kontur.enabled) {
            alert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç');
            return;
        }

        this.showNotification('üì• –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ö–æ–Ω—Ç—É—Ä.–ú–∞—Ä–∫–µ—Ç...', 'info');

        setTimeout(() => {
            this.integrations.kontur.lastSync = new Date().toISOString();
            this.showNotification('‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 8 –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤!', 'success');
            this.renderIntegrationStatus();
        }, 2000);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10001;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            animation: slideIn 0.3s ease-out;
            ${type === 'success' ? 'background: #16a34a;' : ''}
            ${type === 'error' ? 'background: #dc2626;' : ''}
            ${type === 'info' ? 'background: #2563eb;' : ''}
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// Export
if (typeof module !== 'undefined' && module.exports) {
    module.exports = IntegrationsModule;
}

