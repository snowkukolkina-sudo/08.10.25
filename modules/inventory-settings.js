/**
 * DANDY Inventory ‚Äî –ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞–º–∏, –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */

class SettingsModule {
    constructor(inventorySystem) {
        this.system = inventorySystem;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.settings = this.loadSettings();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log('‚öôÔ∏è Settings module initialized');
        this.renderSettings();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    loadSettings() {
        const saved = localStorage.getItem('dandy_inventory_settings');
        if (saved) {
            return JSON.parse(saved);
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            organization: {
                name: '–û–û–û "–î–≠–ù–î–ò"',
                inn: '7700123456',
                kpp: '770001001',
                ogrn: '1234567890123',
                address: '–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
                phone: '+7 (495) 123-45-67',
                email: 'info@dandy-cafe.ru'
            },
            tax: {
                system: 'usn_income_outcome', // usn_income_outcome, osn, psn
                vatRate: 'no_vat', // 20, 10, no_vat
                accountingMethod: 'fifo' // fifo, fefo, avg
            },
            warehouses: [
                { id: 1, name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', type: 'main', isActive: true },
                { id: 2, name: '–ö—É—Ö–Ω—è', type: 'production', isActive: true },
                { id: 3, name: '–ë–∞—Ä', type: 'bar', isActive: true },
                { id: 4, name: '–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–∫–ª–∞–¥', type: 'reserve', isActive: false }
            ],
            units: [
                { id: 'kg', name: '–∫–≥', type: 'weight', factor: 1 },
                { id: 'g', name: '–≥', type: 'weight', factor: 0.001 },
                { id: 'l', name: '–ª', type: 'volume', factor: 1 },
                { id: 'ml', name: '–º–ª', type: 'volume', factor: 0.001 },
                { id: 'pcs', name: '—à—Ç', type: 'piece', factor: 1 },
                { id: 'portion', name: '–ø–æ—Ä—Ü–∏—è', type: 'portion', factor: 1 }
            ],
            categories: [
                { id: 1, name: '–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', type: 'ingredient', parent: null },
                { id: 2, name: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞', type: 'ingredient', parent: null },
                { id: 3, name: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', type: 'ingredient', parent: null },
                { id: 4, name: '–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã', type: 'ingredient', parent: null },
                { id: 5, name: '–ö—Ä—É–ø—ã –∏ –º—É–∫–∞', type: 'ingredient', parent: null },
                { id: 6, name: '–°–æ—É—Å—ã –∏ —Å–ø–µ—Ü–∏–∏', type: 'ingredient', parent: null },
                { id: 7, name: '–ù–∞–ø–∏—Ç–∫–∏ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ', type: 'product', parent: null },
                { id: 8, name: '–ê–ª–∫–æ–≥–æ–ª—å –∫—Ä–µ–ø–∫–∏–π', type: 'alcohol', parent: null },
                { id: 9, name: '–í–∏–Ω–æ', type: 'alcohol', parent: null },
                { id: 10, name: '–ü–∏–≤–æ', type: 'alcohol', parent: null },
                { id: 11, name: '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã', type: 'semi_product', parent: null },
                { id: 12, name: '–ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞', type: 'dish', parent: null }
            ],
            users: [
                { id: 1, username: 'admin', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', role: 'admin', isActive: true, password: 'admin123' },
                { id: 2, username: 'technologist', name: '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', role: 'technologist', isActive: true, password: 'tech123' },
                { id: 3, username: 'warehouse', name: '–ò–≤–∞–Ω –°–∫–ª–∞–¥—Å–∫–æ–π', role: 'warehouse_manager', isActive: true, password: 'wh123' },
                { id: 4, username: 'barman', name: '–°–µ—Ä–≥–µ–π –ë–∞—Ä–º–µ–Ω–æ–≤', role: 'bar_manager', isActive: true, password: 'bar123' },
                { id: 5, username: 'chef', name: '–ú–∏—Ö–∞–∏–ª –ü–æ–≤–∞—Ä–æ–≤', role: 'chef', isActive: true, password: 'chef123' },
                { id: 6, username: 'accountant', name: '–û–ª—å–≥–∞ –°—á–µ—Ç–æ–≤–∞', role: 'accountant', isActive: true, password: 'acc123' }
            ],
            roles: {
                admin: { name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', permissions: ['all'] },
                technologist: { name: '–¢–µ—Ö–Ω–æ–ª–æ–≥', permissions: ['recipes', 'nomenclature_read'] },
                warehouse_manager: { name: '–ó–∞–≤—Å–∫–ª–∞–¥', permissions: ['warehouse', 'arrival', 'inventory'] },
                bar_manager: { name: '–ë–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä', permissions: ['bar', 'alcohol'] },
                chef: { name: '–®–µ—Ñ-–ø–æ–≤–∞—Ä', permissions: ['production', 'recipes_read'] },
                accountant: { name: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', permissions: ['reports', 'analytics'] },
                cashier: { name: '–ö–∞—Å—Å–∏—Ä', permissions: ['sales'] },
                auditor: { name: '–ê—É–¥–∏—Ç–æ—Ä', permissions: ['read_only'] }
            },
            notifications: {
                criticalStock: true,
                expiringProducts: true,
                inventoryReminder: true,
                syncErrors: true,
                email: 'admin@dandy-cafe.ru'
            }
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    saveSettings() {
        localStorage.setItem('dandy_inventory_settings', JSON.stringify(this.settings));
        this.showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    renderSettings() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.updateOrganizationForm();
        this.updateTaxForm();
        this.renderWarehousesList();
        this.renderUnitsList();
        this.renderCategoriesList();
        this.renderUsersList();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
     */
    updateOrganizationForm() {
        const org = this.settings.organization;
        const form = document.querySelector('#settings');
        if (!form) return;

        const fields = {
            'input[value="–û–û–û \\"–î–≠–ù–î–ò\\""]': org.name,
            'input[value="7700123456"]': org.inn,
            'input[value="770001001"]': org.kpp
        };

        Object.keys(fields).forEach(selector => {
            const input = form.querySelector(selector);
            if (input) input.value = fields[selector];
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateTaxForm() {
        // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å select'—ã —Å –Ω–∞–ª–æ–≥–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞–º–∏
     */
    renderWarehousesList() {
        const container = document.getElementById('warehousesManagement');
        if (!container) return;

        container.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h3 style="margin: 0; color: #F3EADB;">–°–∫–ª–∞–¥—ã</h3>
                <button class="btn btn-primary btn-small" onclick="settingsModule.addWarehouse()">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥</button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–¢–∏–ø</th>
                        <th style="text-align: center;">–°—Ç–∞—Ç—É—Å</th>
                        <th style="text-align: center;">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${this.settings.warehouses.map(wh => `
                        <tr>
                            <td><strong>${wh.name}</strong></td>
                            <td>${this.getWarehouseTypeText(wh.type)}</td>
                            <td style="text-align: center;">
                                <span class="badge ${wh.isActive ? 'badge-success' : 'badge-danger'}">
                                    ${wh.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                                </span>
                            </td>
                            <td style="text-align: center;">
                                <button class="btn btn-secondary btn-small" onclick="settingsModule.editWarehouse(${wh.id})">‚úèÔ∏è</button>
                                <button class="btn btn-secondary btn-small" onclick="settingsModule.toggleWarehouse(${wh.id})">
                                    ${wh.isActive ? 'üîí' : 'üîì'}
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    getWarehouseTypeText(type) {
        const types = {
            'main': '–û—Å–Ω–æ–≤–Ω–æ–π',
            'production': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
            'bar': '–ë–∞—Ä',
            'reserve': '–†–µ–∑–µ—Ä–≤–Ω—ã–π'
        };
        return types[type] || type;
    }

    addWarehouse() {
        const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞:');
        if (!name) return;

        const type = prompt('–¢–∏–ø (main/production/bar/reserve):') || 'main';
        
        const maxId = Math.max(...this.settings.warehouses.map(w => w.id), 0);
        this.settings.warehouses.push({
            id: maxId + 1,
            name: name,
            type: type,
            isActive: true
        });

        this.saveSettings();
        this.renderWarehousesList();
    }

    editWarehouse(id) {
        const wh = this.settings.warehouses.find(w => w.id === id);
        if (!wh) return;

        const newName = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', wh.name);
        if (newName) {
            wh.name = newName;
            this.saveSettings();
            this.renderWarehousesList();
        }
    }

    toggleWarehouse(id) {
        const wh = this.settings.warehouses.find(w => w.id === id);
        if (wh) {
            wh.isActive = !wh.isActive;
            this.saveSettings();
            this.renderWarehousesList();
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
     */
    renderUnitsList() {
        const container = document.getElementById('unitsManagement');
        if (!container) return;

        container.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h3 style="margin: 0; color: #F3EADB;">–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è</h3>
                <button class="btn btn-primary btn-small" onclick="settingsModule.addUnit()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ï–ò</button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–¢–∏–ø</th>
                        <th style="text-align: right;">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</th>
                        <th style="text-align: center;">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${this.settings.units.map(unit => `
                        <tr>
                            <td><code>${unit.id}</code></td>
                            <td><strong>${unit.name}</strong></td>
                            <td>${this.getUnitTypeText(unit.type)}</td>
                            <td style="text-align: right;">${unit.factor}</td>
                            <td style="text-align: center;">
                                <button class="btn btn-secondary btn-small" onclick="settingsModule.editUnit('${unit.id}')">‚úèÔ∏è</button>
                                <button class="btn btn-secondary btn-small" onclick="settingsModule.deleteUnit('${unit.id}')">üóëÔ∏è</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    getUnitTypeText(type) {
        const types = {
            'weight': '–í–µ—Å',
            'volume': '–û–±—ä—ë–º',
            'piece': '–®—Ç—É—á–Ω—ã–π',
            'portion': '–ü–æ—Ä—Ü–∏–æ–Ω–Ω—ã–π'
        };
        return types[type] || type;
    }

    addUnit() {
        const id = prompt('ID –µ–¥–∏–Ω–∏—Ü—ã (–ª–∞—Ç–∏–Ω–∏—Ü–∞):');
        if (!id) return;

        const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ:');
        if (!name) return;

        const type = prompt('–¢–∏–ø (weight/volume/piece/portion):') || 'piece';
        const factor = parseFloat(prompt('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π):') || '1');

        this.settings.units.push({ id, name, type, factor });
        this.saveSettings();
        this.renderUnitsList();
    }

    editUnit(id) {
        const unit = this.settings.units.find(u => u.id === id);
        if (!unit) return;

        const newName = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', unit.name);
        if (newName) {
            unit.name = newName;
            this.saveSettings();
            this.renderUnitsList();
        }
    }

    deleteUnit(id) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è?')) return;
        
        this.settings.units = this.settings.units.filter(u => u.id !== id);
        this.saveSettings();
        this.renderUnitsList();
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
     */
    renderCategoriesList() {
        const container = document.getElementById('categoriesManagement');
        if (!container) return;

        container.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h3 style="margin: 0; color: #F3EADB;">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</h3>
                <button class="btn btn-primary btn-small" onclick="settingsModule.addCategory()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–¢–∏–ø</th>
                        <th style="text-align: center;">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${this.settings.categories.map(cat => `
                        <tr>
                            <td><strong>${cat.name}</strong></td>
                            <td>
                                <span class="badge">${this.getCategoryTypeText(cat.type)}</span>
                            </td>
                            <td style="text-align: center;">
                                <button class="btn btn-secondary btn-small" onclick="settingsModule.editCategory(${cat.id})">‚úèÔ∏è</button>
                                <button class="btn btn-secondary btn-small" onclick="settingsModule.deleteCategory(${cat.id})">üóëÔ∏è</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    getCategoryTypeText(type) {
        const types = {
            'ingredient': '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç',
            'semi_product': '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç',
            'dish': '–ë–ª—é–¥–æ',
            'product': '–¢–æ–≤–∞—Ä',
            'alcohol': '–ê–ª–∫–æ–≥–æ–ª—å'
        };
        return types[type] || type;
    }

    addCategory() {
        const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
        if (!name) return;

        const type = prompt('–¢–∏–ø (ingredient/semi_product/dish/product/alcohol):') || 'ingredient';

        const maxId = Math.max(...this.settings.categories.map(c => c.id), 0);
        this.settings.categories.push({
            id: maxId + 1,
            name: name,
            type: type,
            parent: null
        });

        this.saveSettings();
        this.renderCategoriesList();
    }

    editCategory(id) {
        const cat = this.settings.categories.find(c => c.id === id);
        if (!cat) return;

        const newName = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', cat.name);
        if (newName) {
            cat.name = newName;
            this.saveSettings();
            this.renderCategoriesList();
        }
    }

    deleteCategory(id) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) return;
        
        this.settings.categories = this.settings.categories.filter(c => c.id !== id);
        this.saveSettings();
        this.renderCategoriesList();
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
     */
    renderUsersList() {
        const container = document.getElementById('usersManagement');
        if (!container) return;

        container.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h3 style="margin: 0; color: #F3EADB;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏</h3>
                <button class="btn btn-primary btn-small" onclick="settingsModule.addUser()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>–ò–º—è</th>
                        <th>–õ–æ–≥–∏–Ω</th>
                        <th>–†–æ–ª—å</th>
                        <th style="text-align: center;">–°—Ç–∞—Ç—É—Å</th>
                        <th style="text-align: center;">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${this.settings.users.map(user => `
                        <tr>
                            <td><strong>${user.name}</strong></td>
                            <td><code>${user.username}</code></td>
                            <td>${this.settings.roles[user.role]?.name || user.role}</td>
                            <td style="text-align: center;">
                                <span class="badge ${user.isActive ? 'badge-success' : 'badge-danger'}">
                                    ${user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                                </span>
                            </td>
                            <td style="text-align: center;">
                                <button class="btn btn-secondary btn-small" onclick="settingsModule.editUser(${user.id})">‚úèÔ∏è</button>
                                <button class="btn btn-secondary btn-small" onclick="settingsModule.toggleUser(${user.id})">
                                    ${user.isActive ? 'üîí' : 'üîì'}
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>

            <div style="margin-top: 2rem; background: rgba(59, 130, 246, 0.1); border: 1px solid rgba(59, 130, 246, 0.3); padding: 1.5rem; border-radius: 8px;">
                <h3 style="margin: 0 0 1rem 0; color: #60a5fa;">üë• –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:</h3>
                ${Object.keys(this.settings.roles).map(roleKey => {
                    const role = this.settings.roles[roleKey];
                    return `
                        <div style="margin-bottom: 0.75rem; color: #F3EADB;">
                            <strong>${role.name}:</strong> ${role.permissions.join(', ')}
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    }

    addUser() {
        const username = prompt('–õ–æ–≥–∏–Ω:');
        if (!username) return;

        const name = prompt('–ü–æ–ª–Ω–æ–µ –∏–º—è:');
        if (!name) return;

        const role = prompt('–†–æ–ª—å (admin/technologist/warehouse_manager/bar_manager/chef/accountant/cashier/auditor):') || 'cashier';
        const password = prompt('–ü–∞—Ä–æ–ª—å:') || 'password123';

        const maxId = Math.max(...this.settings.users.map(u => u.id), 0);
        this.settings.users.push({
            id: maxId + 1,
            username,
            name,
            role,
            password,
            isActive: true
        });

        this.saveSettings();
        this.renderUsersList();
    }

    editUser(id) {
        const user = this.settings.users.find(u => u.id === id);
        if (!user) return;

        const newName = prompt('–ù–æ–≤–æ–µ –∏–º—è:', user.name);
        if (newName) {
            user.name = newName;
            this.saveSettings();
            this.renderUsersList();
        }
    }

    toggleUser(id) {
        const user = this.settings.users.find(u => u.id === id);
        if (user) {
            user.isActive = !user.isActive;
            this.saveSettings();
            this.renderUsersList();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10001;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            animation: slideIn 0.3s ease-out;
            ${type === 'success' ? 'background: #16a34a;' : ''}
            ${type === 'error' ? 'background: #dc2626;' : ''}
            ${type === 'info' ? 'background: #2563eb;' : ''}
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// Export
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SettingsModule;
}

