/**
 * –ú–û–î–£–õ–¨ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: 2FA
 * –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
 */

class Security2FA {
    constructor() {
        this.config = {
            codeLength: 6,
            codeExpiry: 300, // 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            smsProvider: 'smsc', // 'smsc' | 'twilio' | 'sms-aero'
            emailProvider: 'smtp'
        };
        
        this.pendingCodes = new Map();
        this.init();
    }

    init() {
        console.log('üîê –ú–æ–¥—É–ª—å 2FA –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // ===== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–î–û–í =====
    
    generateCode() {
        return Math.floor(100000 + Math.random() * 900000).toString();
    }

    async sendCode(phone, method = 'sms') {
        const code = this.generateCode();
        const expiresAt = Date.now() + (this.config.codeExpiry * 1000);

        this.pendingCodes.set(phone, {
            code,
            expiresAt,
            attempts: 0
        });

        if (method === 'sms') {
            await this.sendSMS(phone, code);
        } else if (method === 'email') {
            await this.sendEmail(phone, code);
        }

        console.log(`üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}: ${code}`);
        return true;
    }

    async sendSMS(phone, code) {
        const message = `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –î–≠–ù–î–ò: ${code}\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`;

        try {
            // SMSC.ru API
            const response = await fetch(`https://smsc.ru/sys/send.php?login=YOUR_LOGIN&psw=YOUR_PASSWORD&phones=${encodeURIComponent(phone)}&mes=${encodeURIComponent(message)}&charset=utf-8`);
            
            if (response.ok) {
                console.log('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                return true;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
        }

        return false;
    }

    async sendEmail(email, code) {
        const html = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <h2 style="color: #10b981;">üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –î–≠–ù–î–ò</h2>
                <p>–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞:</p>
                <div style="background: #f3f4f6; padding: 20px; text-align: center; font-size: 32px; font-weight: bold; letter-spacing: 5px; border-radius: 8px;">
                    ${code}
                </div>
                <p style="color: #666; font-size: 14px;">–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.</p>
                <p style="color: #666; font-size: 12px;">–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
            </div>
        `;

        try {
            await fetch('/api/send-email', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    to: email,
                    subject: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –î–≠–ù–î–ò',
                    html
                })
            });
            
            console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
            return false;
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –ö–û–î–û–í =====
    
    verifyCode(phone, code) {
        const pending = this.pendingCodes.get(phone);
        
        if (!pending) {
            return { success: false, error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        if (Date.now() > pending.expiresAt) {
            this.pendingCodes.delete(phone);
            return { success: false, error: '–ö–æ–¥ –∏—Å—Ç—ë–∫' };
        }

        if (pending.attempts >= 3) {
            this.pendingCodes.delete(phone);
            return { success: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫' };
        }

        if (pending.code === code) {
            this.pendingCodes.delete(phone);
            return { success: true };
        }

        pending.attempts++;
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' };
    }

    // ===== –ò–ù–¢–ï–†–§–ï–ô–° =====
    
    show2FAModal(phone, onSuccess) {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 400px;">
                <h2>üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h2>
                <p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä:</p>
                <p style="font-weight: bold; font-size: 18px;">${phone}</p>

                <div style="margin: 20px 0;">
                    <input type="text" 
                           id="2faCode" 
                           maxlength="6" 
                           placeholder="000000"
                           style="width: 100%; padding: 15px; font-size: 24px; text-align: center; letter-spacing: 5px; border: 2px solid #e5e7eb; border-radius: 8px;"
                           autofocus>
                </div>

                <div id="2faError" style="color: #ef4444; margin-bottom: 10px; display: none;"></div>

                <div style="display: flex; gap: 10px;">
                    <button class="btn btn-primary" onclick="security2FA.verify2FA('${phone}', this)">
                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                    </button>
                    <button class="btn" onclick="security2FA.resendCode('${phone}')">
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                    <button class="btn" onclick="this.closest('.modal-overlay').remove()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>

                <p style="font-size: 12px; color: #666; margin-top: 15px;">
                    –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç
                </p>
            </div>
        `;

        document.body.appendChild(modal);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ 6 —Ü–∏—Ñ—Ä
        const input = modal.querySelector('#2faCode');
        input.addEventListener('input', (e) => {
            if (e.target.value.length === 6) {
                this.verify2FA(phone, modal.querySelector('.btn-primary'));
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
        modal.dataset.onSuccess = onSuccess;
    }

    async verify2FA(phone, button) {
        const modal = button.closest('.modal-overlay');
        const input = modal.querySelector('#2faCode');
        const error = modal.querySelector('#2faError');
        const code = input.value;

        const result = this.verifyCode(phone, code);

        if (result.success) {
            error.style.display = 'none';
            
            // –£—Å–ø–µ—Ö!
            const successDiv = document.createElement('div');
            successDiv.innerHTML = `
                <div style="text-align: center; padding: 20px;">
                    <div style="font-size: 64px;">‚úÖ</div>
                    <h3>–£—Å–ø–µ—à–Ω–æ!</h3>
                </div>
            `;
            modal.querySelector('.modal-content').innerHTML = successDiv.innerHTML;

            setTimeout(() => {
                modal.remove();
                if (modal.dataset.onSuccess) {
                    eval(modal.dataset.onSuccess)();
                }
            }, 1000);
        } else {
            error.textContent = result.error;
            error.style.display = 'block';
            input.value = '';
            input.focus();
        }
    }

    async resendCode(phone) {
        await this.sendCode(phone);
        alert('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.Security2FA = Security2FA;
window.security2FA = new Security2FA();
