/**
 * DANDY Inventory ‚Äî –ú–æ–¥—É–ª—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏, –∞–ª–∫–æ–≥–æ–ª–µ–º
 */

class NomenclatureModule {
    constructor(inventorySystem) {
        this.system = inventorySystem;
        this.currentFilter = 'all';
        this.searchQuery = '';
        this.selectedProduct = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log('üì¶ Nomenclature module initialized');
        console.log('üì¶ Products available:', this.system.products.length);
        this.renderProductsList();
        this.setupEventListeners();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        document.querySelectorAll('[data-filter-type]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.filterByType(e.target.dataset.filterType);
            });
        });

        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('nomenclatureSearch');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value.toLowerCase();
                this.renderProductsList();
            });
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
     */
    filterByType(type) {
        this.currentFilter = type;
        this.renderProductsList();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('[data-filter-type]').forEach(btn => {
            btn.classList.remove('btn-primary');
            btn.classList.add('btn-secondary');
        });
        const activeBtn = document.querySelector(`[data-filter-type="${type}"]`);
        if (activeBtn) {
            activeBtn.classList.remove('btn-secondary');
            activeBtn.classList.add('btn-primary');
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    renderProductsList() {
        const tbody = document.querySelector('#productsTableBody');
        if (!tbody) {
            console.error('‚ùå #productsTableBody not found!');
            return;
        }

        console.log('üîÑ Rendering products table...');
        let products = this.system.products;

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        if (this.currentFilter !== 'all') {
            products = products.filter(p => p.type === this.currentFilter);
        }

        // –ü–æ–∏—Å–∫
        if (this.searchQuery) {
            products = products.filter(p =>
                p.name.toLowerCase().includes(this.searchQuery) ||
                p.code.toLowerCase().includes(this.searchQuery) ||
                (p.category && p.category.toLowerCase().includes(this.searchQuery))
            );
        }

        if (products.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" style="text-align: center; padding: 2rem; color: #F3EADB; opacity: 0.7;">
                        –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = products.map(product => {
            const stockStatus = this.getStockStatus(product);
            const statusBadge = this.getStatusBadge(stockStatus);

            return `
                <tr style="cursor: pointer;" onclick="nomenclatureModule.selectProduct(${product.id})">
                    <td><code>${product.code}</code></td>
                    <td>
                        <strong>${product.name}</strong>
                        ${product.isAlcohol ? '<span class="badge badge-warning" style="margin-left: 0.5rem;">üç∑ –ê–ª–∫–æ</span>' : ''}
                    </td>
                    <td>${product.category || '‚Äî'}</td>
                    <td>${product.baseUnit}</td>
                    <td>${statusBadge}</td>
                    <td><strong>‚ÇΩ ${product.price.toLocaleString()}</strong>/${product.baseUnit}</td>
                    <td>
                        <button class="btn btn-primary btn-small" onclick="event.stopPropagation(); nomenclatureModule.editProduct(${product.id})">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button class="btn btn-secondary btn-small" onclick="event.stopPropagation(); nomenclatureModule.deleteProduct(${product.id})">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </td>
                </tr>
            `;
        }).join('');
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞—Ç–∫–∞
     */
    getStockStatus(product) {
        if (product.currentStock <= 0) return 'out';
        if (product.currentStock < product.minStock) return 'critical';
        if (product.currentStock < product.minStock * 1.5) return 'low';
        return 'ok';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusBadge(status) {
        const badges = {
            out: '<span class="badge badge-danger">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</span>',
            critical: '<span class="badge badge-danger">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</span>',
            low: '<span class="badge badge-warning">–ù–∏–∑–∫–∏–π</span>',
            ok: '<span class="badge badge-success">–í –Ω–∞–ª–∏—á–∏–∏</span>'
        };
        return badges[status] || badges.ok;
    }

    /**
     * –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
     */
    selectProduct(productId) {
        this.selectedProduct = this.system.products.find(p => p.id === productId);
        if (this.selectedProduct) {
            this.showProductDetails(this.selectedProduct);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
     */
    showProductDetails(product) {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
        const stockByWarehouse = this.system.stockBalances
            .filter(b => b.productId === product.id)
            .map(b => {
                const warehouse = this.system.warehouses.find(w => w.id === b.warehouseId);
                return {
                    warehouse: warehouse ? warehouse.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥',
                    quantity: b.quantity,
                    batchNumber: b.batchNumber,
                    expiryDate: b.expiryDate
                };
            });

        const stockHTML = stockByWarehouse.length > 0
            ? stockByWarehouse.map(s => `
                <tr>
                    <td>${s.warehouse}</td>
                    <td>${s.quantity} ${product.baseUnit}</td>
                    <td>${s.batchNumber || '‚Äî'}</td>
                    <td>${s.expiryDate || '‚Äî'}</td>
                </tr>
            `).join('')
            : '<tr><td colspan="4" style="text-align: center; color: #F3EADB; opacity: 0.7;">–û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç</td></tr>';

        modal.innerHTML = `
            <div style="background: #094a45; border-radius: 16px; padding: 2rem; max-width: 800px; width: 90%; max-height: 90vh; overflow-y: auto; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12);">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                    <h2 style="margin: 0; color: #eebc5c;">üì¶ ${product.name}</h2>
                    <button onclick="this.closest('.modal-overlay').remove()" 
                            style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #F3EADB;">√ó</button>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                    <div>
                        <strong>–ö–æ–¥:</strong> <code>${product.code}</code>
                    </div>
                    <div>
                        <strong>–¢–∏–ø:</strong> ${this.getProductTypeLabel(product.type)}
                    </div>
                    <div>
                        <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${product.category || '‚Äî'}
                    </div>
                    <div>
                        <strong>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:</strong> ${product.baseUnit}
                    </div>
                    <div>
                        <strong>–¶–µ–Ω–∞:</strong> ‚ÇΩ ${product.price.toLocaleString()}/${product.baseUnit}
                    </div>
                    <div>
                        <strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫:</strong> ${product.minStock} ${product.baseUnit}
                    </div>
                    ${product.isAlcohol ? `
                        <div>
                            <strong>–ö—Ä–µ–ø–æ—Å—Ç—å:</strong> ${product.alcoholStrength || 0}%
                        </div>
                        <div>
                            <strong>–ï–ì–ê–ò–°:</strong> <span class="badge badge-warning">–ü–æ–¥–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ</span>
                        </div>
                    ` : ''}
                </div>

                <h3 style="margin-top: 1.5rem; margin-bottom: 1rem; color: var(--dandy-green);">üìä –û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>–°–∫–ª–∞–¥</th>
                            <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                            <th>–ü–∞—Ä—Ç–∏—è</th>
                            <th>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${stockHTML}
                    </tbody>
                </table>

                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button onclick="nomenclatureModule.editProduct(${product.id}); this.closest('.modal-overlay').remove();" 
                            class="btn btn-primary">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button onclick="nomenclatureModule.showMovementHistory(${product.id})" 
                            class="btn btn-secondary">
                        üìú –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" 
                            class="btn btn-secondary">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
     */
    editProduct(productId) {
        const product = this.system.products.find(p => p.id === productId);
        if (!product) return;

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; border-radius: 16px; padding: 2rem; max-width: 600px; width: 90%; max-height: 90vh; overflow-y: auto; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12);">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</h2>

                <div class="form-group">
                    <label class="form-label">–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</label>
                    <input type="text" class="form-input" id="editCode" value="${product.code}">
                </div>

                <div class="form-group">
                    <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</label>
                    <input type="text" class="form-input" id="editName" value="${product.name}">
                </div>

                <div class="form-group">
                    <label class="form-label">–¢–∏–ø</label>
                    <select class="form-select" id="editType">
                        <option value="ingredient" ${product.type === 'ingredient' ? 'selected' : ''}>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç</option>
                        <option value="semi_product" ${product.type === 'semi_product' ? 'selected' : ''}>–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç</option>
                        <option value="alcohol" ${product.type === 'alcohol' ? 'selected' : ''}>–ê–ª–∫–æ–≥–æ–ª—å</option>
                        <option value="packaging" ${product.type === 'packaging' ? 'selected' : ''}>–¢–∞—Ä–∞</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                    <input type="text" class="form-input" id="editCategory" value="${product.category || ''}">
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                    <div class="form-group">
                        <label class="form-label">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
                        <select class="form-select" id="editUnit">
                            <option value="–∫–≥" ${product.baseUnit === '–∫–≥' ? 'selected' : ''}>–∫–≥</option>
                            <option value="–≥" ${product.baseUnit === '–≥' ? 'selected' : ''}>–≥</option>
                            <option value="–ª" ${product.baseUnit === '–ª' ? 'selected' : ''}>–ª</option>
                            <option value="–º–ª" ${product.baseUnit === '–º–ª' ? 'selected' : ''}>–º–ª</option>
                            <option value="—à—Ç" ${product.baseUnit === '—à—Ç' ? 'selected' : ''}>—à—Ç</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">–¶–µ–Ω–∞ (‚ÇΩ)</label>
                        <input type="number" class="form-input" id="editPrice" value="${product.price}" step="0.01">
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫</label>
                    <input type="number" class="form-input" id="editMinStock" value="${product.minStock || 0}" step="0.01">
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center; gap: 0.5rem;">
                        <input type="checkbox" id="editIsAlcohol" ${product.isAlcohol ? 'checked' : ''}>
                        <span>–ê–ª–∫–æ–≥–æ–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è (–ï–ì–ê–ò–°)</span>
                    </label>
                </div>

                <div id="alcoholFields" style="display: ${product.isAlcohol ? 'block' : 'none'};">
                    <div class="form-group">
                        <label class="form-label">–ö—Ä–µ–ø–æ—Å—Ç—å (%)</label>
                        <input type="number" class="form-input" id="editStrength" value="${product.alcoholStrength || 0}" step="0.1">
                    </div>
                </div>

                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button onclick="nomenclatureModule.saveProduct(${product.id})" class="btn btn-primary">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–µ–π –∞–ª–∫–æ–≥–æ–ª—è
        const alcoholCheckbox = modal.querySelector('#editIsAlcohol');
        const alcoholFields = modal.querySelector('#alcoholFields');
        alcoholCheckbox.addEventListener('change', (e) => {
            alcoholFields.style.display = e.target.checked ? 'block' : 'none';
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
     */
    saveProduct(productId) {
        const product = this.system.products.find(p => p.id === productId);
        if (!product) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        product.code = document.getElementById('editCode').value;
        product.name = document.getElementById('editName').value;
        product.type = document.getElementById('editType').value;
        product.category = document.getElementById('editCategory').value;
        product.baseUnit = document.getElementById('editUnit').value;
        product.price = parseFloat(document.getElementById('editPrice').value);
        product.minStock = parseFloat(document.getElementById('editMinStock').value);
        product.isAlcohol = document.getElementById('editIsAlcohol').checked;

        if (product.isAlcohol) {
            product.alcoholStrength = parseFloat(document.getElementById('editStrength').value);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        this.system.saveToLocalStorage('products', this.system.products);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        document.querySelector('.modal-overlay').remove();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        this.renderProductsList();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!', 'success');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
     */
    createProduct() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; border-radius: 16px; padding: 2rem; max-width: 600px; width: 90%; max-height: 90vh; overflow-y: auto; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12);">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</h2>

                <div class="form-group">
                    <label class="form-label">–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</label>
                    <input type="text" class="form-input" id="newCode" placeholder="ING-001">
                </div>

                <div class="form-group">
                    <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ*</label>
                    <input type="text" class="form-input" id="newName" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–æ—Å–æ—Å—å —Ñ–∏–ª–µ">
                </div>

                <div class="form-group">
                    <label class="form-label">–¢–∏–ø*</label>
                    <select class="form-select" id="newType">
                        <option value="ingredient">–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç</option>
                        <option value="semi_product">–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç</option>
                        <option value="alcohol">–ê–ª–∫–æ–≥–æ–ª—å</option>
                        <option value="packaging">–¢–∞—Ä–∞</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                    <input type="text" class="form-input" id="newCategory" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†—ã–±–∞/–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã">
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                    <div class="form-group">
                        <label class="form-label">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è*</label>
                        <select class="form-select" id="newUnit">
                            <option value="–∫–≥">–∫–≥</option>
                            <option value="–≥">–≥</option>
                            <option value="–ª">–ª</option>
                            <option value="–º–ª">–º–ª</option>
                            <option value="—à—Ç">—à—Ç</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">–¶–µ–Ω–∞ (‚ÇΩ)*</label>
                        <input type="number" class="form-input" id="newPrice" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É" step="0.01" min="0.01">
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫*</label>
                    <input type="number" class="form-input" id="newMinStock" value="1" step="0.01" min="0.01">
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center; gap: 0.5rem;">
                        <input type="checkbox" id="newIsAlcohol">
                        <span>–ê–ª–∫–æ–≥–æ–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è (–ï–ì–ê–ò–°)</span>
                    </label>
                </div>

                <div id="newAlcoholFields" style="display: none;">
                    <div class="form-group">
                        <label class="form-label">–ö—Ä–µ–ø–æ—Å—Ç—å (%)</label>
                        <input type="number" class="form-input" id="newStrength" value="0" step="0.1">
                    </div>
                </div>

                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button onclick="nomenclatureModule.saveNewProduct()" class="btn btn-primary">
                        ‚úÖ –°–æ–∑–¥–∞—Ç—å
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–µ–π –∞–ª–∫–æ–≥–æ–ª—è
        const alcoholCheckbox = modal.querySelector('#newIsAlcohol');
        const alcoholFields = modal.querySelector('#newAlcoholFields');
        alcoholCheckbox.addEventListener('change', (e) => {
            alcoholFields.style.display = e.target.checked ? 'block' : 'none';
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
     */
    saveNewProduct() {
        const name = document.getElementById('newName').value.trim();
        if (!name) {
            alert('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
            return;
        }

        const newProduct = {
            id: Date.now(),
            code: document.getElementById('newCode').value || `PRD-${Date.now()}`,
            name: name,
            type: document.getElementById('newType').value,
            category: document.getElementById('newCategory').value,
            baseUnit: document.getElementById('newUnit').value,
            price: parseFloat(document.getElementById('newPrice').value) || 0,
            minStock: parseFloat(document.getElementById('newMinStock').value) || 0,
            currentStock: 0,
            isAlcohol: document.getElementById('newIsAlcohol').checked,
            createdAt: new Date().toISOString()
        };

        if (newProduct.isAlcohol) {
            newProduct.alcoholStrength = parseFloat(document.getElementById('newStrength').value) || 0;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        this.system.products.push(newProduct);
        this.system.saveToLocalStorage('products', this.system.products);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        document.querySelector('.modal-overlay').remove();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        this.renderProductsList();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
     */
    deleteProduct(productId) {
        const product = this.system.products.find(p => p.id === productId);
        if (!product) return;

        if (!confirm(`‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.name}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
            return;
        }

        // –£–¥–∞–ª—è–µ–º
        this.system.products = this.system.products.filter(p => p.id !== productId);
        this.system.saveToLocalStorage('products', this.system.products);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        this.renderProductsList();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω', 'success');
    }

    /**
     * –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    showMovementHistory(productId) {
        alert('üìú –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n\n–ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞
     */
    getProductTypeLabel(type) {
        const labels = {
            ingredient: '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç',
            semi_product: '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç',
            alcohol: '–ê–ª–∫–æ–≥–æ–ª—å',
            packaging: '–¢–∞—Ä–∞'
        };
        return labels[type] || type;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ menu_data.json
     */
    async loadMenuFromJSON() {
        try {
            this.showNotification('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ menu_data.json...', 'info');
            
            const response = await fetch('menu_data.json');
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å menu_data.json');
            }
            
            const data = await response.json();
            let addedCount = 0;
            let skippedCount = 0;
            
            // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
            const categoryTypeMap = {
                '–ü–∏—Ü—Ü–∞': 'dish',
                '–†–æ–ª–ª—ã': 'dish',
                '–ú–∞–∫–∏': 'dish',
                '–ó–∞–ø–µ—á–µ–Ω–Ω—ã–µ': 'dish',
                '–¢–µ–º–ø—É—Ä–∞': 'dish',
                '–ì—É–Ω–∫–∞–Ω—ã': 'dish',
                '–°—É—à–∏': 'dish',
                '–°–µ—Ç—ã': 'dish',
                '–°–∞–ª–∞—Ç—ã': 'dish',
                '–ó–∞–∫—É—Å–∫–∏': 'dish',
                '–°—É–ø—ã': 'dish',
                '–°—ç–Ω–¥–≤–∏—á–∏': 'dish',
                'Wok': 'dish',
                '–ó–∞–≤—Ç—Ä–∞–∫–∏': 'dish',
                '–ë–ª–∏–Ω—ã': 'dish',
                '–ü–∏—Ä–æ–≥–∏': 'dish',
                '–ù–∞–ø–∏—Ç–∫–∏': 'ingredient',
                '–°–æ—É—Å—ã': 'semi_product',
                '–ö–æ–º–±–æ': 'dish'
            };
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
            let maxId = Math.max(...this.system.products.map(p => p.id), 0);
            
            data.offers.forEach(item => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
                const exists = this.system.products.some(p => 
                    p.name.toLowerCase() === item.name.toLowerCase()
                );
                
                if (exists) {
                    skippedCount++;
                    return;
                }
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const categoryName = item.category_name || '–î—Ä—É–≥–æ–µ';
                const productType = categoryTypeMap[categoryName] || 'ingredient';
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (40% –æ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏)
                const price = parseInt(item.price) || 0;
                const cost = Math.round(price * 0.4);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                maxId++;
                this.system.products.push({
                    id: maxId,
                    code: `MENU-${item.id}`,
                    name: item.name,
                    type: productType,
                    category: categoryName,
                    baseUnit: '—à—Ç',
                    isAlcohol: false,
                    minStock: 5.0,
                    currentStock: 0,
                    price: cost, // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä–æ—É—á—ë—Ç–∞
                    salePrice: price, // –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
                    description: item.description ? item.description.replace(/<[^>]*>/g, '') : '',
                    picture: item.picture || '',
                    url: item.url || ''
                });
                
                addedCount++;
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            this.system.saveToLocalStorage('products', this.system.products);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.renderProductsList();
            
            this.showNotification(
                `‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedCount} —Ç–æ–≤–∞—Ä–æ–≤\n–ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏): ${skippedCount}`,
                'success'
            );
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: ' + error.message, 'error');
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10001;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            animation: slideIn 0.3s ease-out;
            white-space: pre-line;
            ${type === 'success' ? 'background: #16a34a;' : ''}
            ${type === 'error' ? 'background: #dc2626;' : ''}
            ${type === 'info' ? 'background: #2563eb;' : ''}
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// Export
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NomenclatureModule;
}

