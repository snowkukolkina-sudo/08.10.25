/**
 * –°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò
 * –ë–æ–Ω—É—Å—ã, —Å–∫–∏–¥–∫–∏, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
 */

class LoyaltySystem {
    constructor() {
        this.config = {
            bonusRate: 0.05, // 5% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
            bonusToRublesRate: 1, // 1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å
            maxBonusUsage: 0.3, // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 30% –æ—Ç —Å—É–º–º—ã
            referralBonus: 500, // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞
            birthdayBonus: 1000, // –ë–æ–Ω—É—Å –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
            
            levels: [
                { name: '–ù–æ–≤–∏—á–æ–∫', minOrders: 0, discount: 0 },
                { name: '–î—Ä—É–≥', minOrders: 5, discount: 0.03 },
                { name: 'VIP', minOrders: 20, discount: 0.05 },
                { name: '–õ–µ–≥–µ–Ω–¥–∞', minOrders: 50, discount: 0.10 }
            ]
        };
        
        this.customers = new Map();
        this.init();
    }

    init() {
        console.log('üéÅ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        this.loadCustomers();
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê–ú–ò =====
    
    async registerCustomer(phone, data = {}) {
        const customer = {
            phone,
            name: data.name || '',
            email: data.email || '',
            birthday: data.birthday || null,
            bonuses: 0,
            totalOrders: 0,
            totalSpent: 0,
            level: '–ù–æ–≤–∏—á–æ–∫',
            registeredAt: new Date().toISOString(),
            referralCode: this.generateReferralCode(phone),
            referredBy: data.referredBy || null
        };

        this.customers.set(phone, customer);
        await this.saveCustomer(customer);

        // –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if (data.referredBy) {
            await this.applyReferralBonus(data.referredBy, phone);
        }

        console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', phone);
        return customer;
    }

    async getCustomer(phone) {
        if (!this.customers.has(phone)) {
            const saved = await this.loadCustomer(phone);
            if (saved) {
                this.customers.set(phone, saved);
            } else {
                return null;
            }
        }
        return this.customers.get(phone);
    }

    // ===== –ë–û–ù–£–°–´ =====
    
    async addBonusesForOrder(phone, orderAmount) {
        const customer = await this.getCustomer(phone);
        if (!customer) return 0;

        const bonuses = Math.floor(orderAmount * this.config.bonusRate);
        customer.bonuses += bonuses;
        customer.totalOrders++;
        customer.totalSpent += orderAmount;

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        this.updateCustomerLevel(customer);

        await this.saveCustomer(customer);
        
        console.log(`üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${bonuses} –±–æ–Ω—É—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç—É ${phone}`);
        return bonuses;
    }

    async useBonuses(phone, orderAmount, bonusesToUse) {
        const customer = await this.getCustomer(phone);
        if (!customer) return 0;

        const maxUsage = Math.floor(orderAmount * this.config.maxBonusUsage);
        const actualUsage = Math.min(bonusesToUse, customer.bonuses, maxUsage);

        customer.bonuses -= actualUsage;
        await this.saveCustomer(customer);

        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${actualUsage} –±–æ–Ω—É—Å–æ–≤`);
        return actualUsage;
    }

    async applyBirthdayBonus(phone) {
        const customer = await this.getCustomer(phone);
        if (!customer || !customer.birthday) return false;

        const today = new Date();
        const birthday = new Date(customer.birthday);

        if (today.getMonth() === birthday.getMonth() && 
            today.getDate() === birthday.getDate()) {
            
            customer.bonuses += this.config.birthdayBonus;
            await this.saveCustomer(customer);
            
            console.log(`üéÇ –ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∫–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è: ${this.config.birthdayBonus}`);
            return true;
        }

        return false;
    }

    // ===== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê =====
    
    generateReferralCode(phone) {
        return 'DANDY' + phone.slice(-6);
    }

    async applyReferralBonus(referrerCode, newCustomerPhone) {
        // –ù–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
        const referrer = Array.from(this.customers.values())
            .find(c => c.referralCode === referrerCode);

        if (referrer) {
            referrer.bonuses += this.config.referralBonus;
            await this.saveCustomer(referrer);
            
            console.log(`üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ${this.config.referralBonus} –¥–ª—è ${referrer.phone}`);
            return true;
        }

        return false;
    }

    // ===== –£–†–û–í–ù–ò =====
    
    updateCustomerLevel(customer) {
        for (let i = this.config.levels.length - 1; i >= 0; i--) {
            if (customer.totalOrders >= this.config.levels[i].minOrders) {
                customer.level = this.config.levels[i].name;
                customer.discount = this.config.levels[i].discount;
                break;
            }
        }
    }

    getCustomerDiscount(customer) {
        const level = this.config.levels.find(l => l.name === customer.level);
        return level ? level.discount : 0;
    }

    // ===== –°–û–•–†–ê–ù–ï–ù–ò–ï =====
    
    loadCustomers() {
        try {
            const data = localStorage.getItem('loyalty_customers');
            if (data) {
                const customers = JSON.parse(data);
                customers.forEach(c => this.customers.set(c.phone, c));
                console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${customers.length}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
        }
    }

    async loadCustomer(phone) {
        try {
            const response = await fetch(`/api/loyalty/customers/${phone}`);
            if (response.ok) {
                return await response.json();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        }
        return null;
    }

    async saveCustomer(customer) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            const all = Array.from(this.customers.values());
            localStorage.setItem('loyalty_customers', JSON.stringify(all));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await fetch('/api/loyalty/customers', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(customer)
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
        }
    }

    // ===== –ò–ù–¢–ï–†–§–ï–ô–° =====
    
    showCustomerInfo(phone) {
        const customer = this.customers.get(phone);
        if (!customer) {
            alert('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 500px;">
                <h2>üéÅ ${customer.name || customer.phone}</h2>
                
                <div class="loyalty-info">
                    <div class="info-card" style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 20px; border-radius: 12px; margin-bottom: 20px;">
                        <h3 style="margin: 0 0 10px 0;">–£—Ä–æ–≤–µ–Ω—å: ${customer.level}</h3>
                        <div style="font-size: 32px; font-weight: bold;">${customer.bonuses} –±–æ–Ω—É—Å–æ–≤</div>
                        <div style="opacity: 0.9; margin-top: 10px;">
                            = ${customer.bonuses * this.config.bonusToRublesRate}‚ÇΩ
                        </div>
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 20px;">
                        <div class="stat-box" style="background: #f0f9ff; padding: 15px; border-radius: 8px;">
                            <div style="font-size: 24px; font-weight: bold; color: #0369a1;">${customer.totalOrders}</div>
                            <div style="color: #666;">–ó–∞–∫–∞–∑–æ–≤</div>
                        </div>
                        <div class="stat-box" style="background: #f0fdf4; padding: 15px; border-radius: 8px;">
                            <div style="font-size: 24px; font-weight: bold; color: #15803d;">${customer.totalSpent}‚ÇΩ</div>
                            <div style="color: #666;">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
                        </div>
                    </div>

                    <div style="background: #fffbeb; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                        <strong>üì± –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</strong>
                        <div style="font-size: 20px; font-weight: bold; color: #92400e; margin-top: 5px;">
                            ${customer.referralCode}
                        </div>
                        <div style="font-size: 12px; color: #666; margin-top: 5px;">
                            –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ ${this.config.referralBonus} –±–æ–Ω—É—Å–æ–≤!
                        </div>
                    </div>

                    ${customer.discount > 0 ? `
                        <div style="background: #dcfce7; padding: 15px; border-radius: 8px;">
                            <strong>üéâ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞:</strong>
                            <div style="font-size: 20px; font-weight: bold; color: #15803d;">
                                ${(customer.discount * 100).toFixed(0)}%
                            </div>
                        </div>
                    ` : ''}
                </div>

                <button class="btn" onclick="this.closest('.modal-overlay').remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        `;

        document.body.appendChild(modal);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.LoyaltySystem = LoyaltySystem;
