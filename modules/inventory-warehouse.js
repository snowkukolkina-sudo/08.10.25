/**
 * DANDY Inventory ‚Äî –ú–æ–¥—É–ª—å —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —É—á—ë—Ç–∞
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è–º–∏
 */

class WarehouseModule {
    constructor(inventorySystem) {
        this.system = inventorySystem;
        this.currentWarehouse = 'all';
        this.selectedDocument = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log('üè≠ Warehouse module initialized');
        this.renderStockBalances();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
     */
    renderStockBalances() {
        const tbody = document.querySelector('#stockBalancesBody');
        if (!tbody) return;

        let balances = this.system.stockBalances;

        // –§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–ª–∞–¥—É
        if (this.currentWarehouse !== 'all') {
            balances = balances.filter(b => b.warehouseId === parseInt(this.currentWarehouse));
        }

        if (balances.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" style="text-align: center; padding: 2rem; color: #F3EADB; opacity: 0.7;">
                        –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = balances.map(balance => {
            const product = this.system.products.find(p => p.id === balance.productId);
            const warehouse = this.system.warehouses.find(w => w.id === balance.warehouseId);
            
            if (!product) return '';

            const totalAmount = balance.quantity * balance.costPerUnit;
            const isExpiring = balance.expiryDate && this.isExpiringSoon(balance.expiryDate);
            const isExpired = balance.expiryDate && new Date(balance.expiryDate) < new Date();

            return `
                <tr>
                    <td><code>${product.code}</code></td>
                    <td>
                        <strong>${product.name}</strong>
                        ${isExpired ? '<span class="badge badge-danger" style="margin-left: 0.5rem;">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!</span>' : ''}
                        ${isExpiring && !isExpired ? '<span class="badge badge-warning" style="margin-left: 0.5rem;">–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç</span>' : ''}
                    </td>
                    <td>${balance.batchNumber || '‚Äî'}</td>
                    <td>${balance.expiryDate || '‚Äî'}</td>
                    <td>${warehouse ? warehouse.name : '‚Äî'}</td>
                    <td><strong>${balance.quantity}</strong> ${product.baseUnit}</td>
                    <td><strong>‚ÇΩ ${totalAmount.toLocaleString('ru-RU', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</strong></td>
                </tr>
            `;
        }).filter(html => html).join('');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
     */
    isExpiringSoon(expiryDate) {
        const days = this.getDaysUntilExpiry(expiryDate);
        return days > 0 && days <= 7;
    }

    /**
     * –î–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
     */
    getDaysUntilExpiry(expiryDate) {
        const expiry = new Date(expiryDate);
        const today = new Date();
        const diff = expiry - today;
        return Math.floor(diff / (1000 * 60 * 60 * 24));
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞
     */
    createArrivalDocument() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        modal.innerHTML = `
            <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); border-radius: 16px; padding: 2rem; max-width: 800px; width: 90%; max-height: 90vh; overflow-y: auto;">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">üì• –ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</h2>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                    <div class="form-group">
                        <label class="form-label">–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞*</label>
                        <input type="text" class="form-input" id="arrivalNumber" value="ARR-${Date.now()}" placeholder="ARR-00001">
                    </div>

                    <div class="form-group">
                        <label class="form-label">–î–∞—Ç–∞*</label>
                        <input type="date" class="form-input" id="arrivalDate" value="${new Date().toISOString().split('T')[0]}">
                    </div>

                    <div class="form-group">
                        <label class="form-label">–°–∫–ª–∞–¥*</label>
                        <select class="form-select" id="arrivalWarehouse">
                            ${this.system.warehouses.map(w => `
                                <option value="${w.id}">${w.name}</option>
                            `).join('')}
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">–ü–æ—Å—Ç–∞–≤—â–∏–∫</label>
                        <input type="text" class="form-input" id="arrivalSupplier" placeholder="–û–û–û –ü–æ—Å—Ç–∞–≤—â–∏–∫">
                    </div>
                </div>

                <h3 style="margin-bottom: 1rem; color: #eebc5c;">–ü–æ–∑–∏—Ü–∏–∏</h3>
                
                <div id="arrivalLines" style="margin-bottom: 1rem;">
                    <!-- –°—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
                </div>

                <button onclick="warehouseModule.addArrivalLine()" class="btn btn-secondary btn-small" style="margin-bottom: 1rem;">
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
                </button>

                <div style="background: #f0fdf4; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;">
                    <strong>–°—É–º–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:</strong> 
                    <span id="arrivalTotal" style="font-size: 1.2em; font-weight: 700; color: #eebc5c; margin-left: 0.5rem;">
                        ‚ÇΩ 0.00
                    </span>
                </div>

                <div style="display: flex; gap: 1rem;">
                    <button onclick="warehouseModule.saveArrivalDocument()" class="btn btn-primary">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.arrivalLines = [];
        this.addArrivalLine();
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –ø—Ä–∏—Ö–æ–¥
     */
    addArrivalLine() {
        this.arrivalLines = this.arrivalLines || [];
        this.arrivalLines.push({
            productId: null,
            quantity: 0,
            costPerUnit: 0,
            batchNumber: '',
            expiryDate: ''
        });
        this.renderArrivalLines();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –ø—Ä–∏—Ö–æ–¥–∞
     */
    renderArrivalLines() {
        const container = document.getElementById('arrivalLines');
        if (!container) return;

        container.innerHTML = this.arrivalLines.map((line, index) => {
            const product = line.productId ? this.system.products.find(p => p.id === line.productId) : null;
            
            return `
                <div style="background: #f9fafb; padding: 1rem; border-radius: 8px; margin-bottom: 0.75rem;">
                    <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr auto; gap: 0.75rem; align-items: end;">
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–¢–æ–≤–∞—Ä</label>
                            <select class="form-select" onchange="warehouseModule.updateArrivalLine(${index}, 'productId', parseInt(this.value))">
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                                ${this.system.products.map(p => `
                                    <option value="${p.id}" ${line.productId === p.id ? 'selected' : ''}>${p.name}</option>
                                `).join('')}
                            </select>
                        </div>
                        
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                            <input type="number" class="form-input" value="${line.quantity}" step="0.01" 
                                   onchange="warehouseModule.updateArrivalLine(${index}, 'quantity', parseFloat(this.value))">
                        </div>
                        
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–¶–µ–Ω–∞</label>
                            <input type="number" class="form-input" value="${line.costPerUnit}" step="0.01" 
                                   onchange="warehouseModule.updateArrivalLine(${index}, 'costPerUnit', parseFloat(this.value))">
                        </div>
                        
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–ü–∞—Ä—Ç–∏—è</label>
                            <input type="text" class="form-input" value="${line.batchNumber}" 
                                   onchange="warehouseModule.updateArrivalLine(${index}, 'batchNumber', this.value)">
                        </div>
                        
                        <div class="form-group" style="margin: 0;">
                            <label class="form-label" style="font-size: 0.85em;">–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏</label>
                            <input type="date" class="form-input" value="${line.expiryDate}" 
                                   onchange="warehouseModule.updateArrivalLine(${index}, 'expiryDate', this.value)">
                        </div>
                        
                        <button onclick="warehouseModule.removeArrivalLine(${index})" 
                                style="padding: 0.5rem 0.75rem; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer;">
                            üóëÔ∏è
                        </button>
                    </div>
                    ${product ? `<div style="margin-top: 0.5rem; color: #666; font-size: 0.85em;">
                        –°—É–º–º–∞: ‚ÇΩ ${(line.quantity * line.costPerUnit).toFixed(2)}
                    </div>` : ''}
                </div>
            `;
        }).join('');

        this.calculateArrivalTotal();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–∏—Ö–æ–¥–∞
     */
    updateArrivalLine(index, field, value) {
        if (this.arrivalLines[index]) {
            this.arrivalLines[index][field] = value;
            this.renderArrivalLines();
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–∏—Ö–æ–¥–∞
     */
    removeArrivalLine(index) {
        this.arrivalLines.splice(index, 1);
        this.renderArrivalLines();
    }

    /**
     * –†–∞—Å—á—ë—Ç —Å—É–º–º—ã –ø—Ä–∏—Ö–æ–¥–∞
     */
    calculateArrivalTotal() {
        const total = this.arrivalLines.reduce((sum, line) => {
            return sum + (line.quantity * line.costPerUnit);
        }, 0);

        const totalElement = document.getElementById('arrivalTotal');
        if (totalElement) {
            totalElement.textContent = `‚ÇΩ ${total.toFixed(2)}`;
        }

        return total;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞
     */
    saveArrivalDocument() {
        const docNumber = document.getElementById('arrivalNumber').value.trim();
        const docDate = document.getElementById('arrivalDate').value;
        const warehouseId = parseInt(document.getElementById('arrivalWarehouse').value);

        if (!docNumber || !docDate) {
            alert('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        if (this.arrivalLines.length === 0 || !this.arrivalLines.some(l => l.productId)) {
            alert('‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é');
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –¥–æ–∫—É–º–µ–Ω—Ç
        const doc = this.system.createArrivalDocument({
            docNumber,
            docDate,
            warehouseId,
            lines: this.arrivalLines.filter(l => l.productId)
        });

        // –ü—Ä–æ–≤–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç (–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏)
        this.system.postDocument(doc.id);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        document.querySelector('.modal-overlay').remove();

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        this.renderStockBalances();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ–¥—ë–Ω!', 'success');
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10001;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            animation: slideIn 0.3s ease-out;
            ${type === 'success' ? 'background: #16a34a;' : ''}
            ${type === 'error' ? 'background: #dc2626;' : ''}
            ${type === 'info' ? 'background: #2563eb;' : ''}
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// Export
if (typeof module !== 'undefined' && module.exports) {
    module.exports = WarehouseModule;
}

