/**
 * DANDY Inventory ‚Äî –ú–æ–¥—É–ª—å –±–∞—Ä–∞ –∏ —Ä–∞–∑–ª–∏–≤–Ω–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è
 * –í—Å–∫—Ä—ã—Ç–∏–µ –±—É—Ç—ã–ª–æ–∫, —É—á—ë—Ç –∫–µ–≥, —Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ï–ì–ê–ò–°
 */

class BarModule {
    constructor(inventorySystem) {
        this.system = inventorySystem;
        this.openedBottles = this.loadOpenedBottles();
        this.kegs = this.loadKegs();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log('üç∫ Bar module initialized');
        this.renderOpenedBottles();
        this.renderKegs();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫
     */
    loadOpenedBottles() {
        const saved = this.system.loadFromLocalStorage('openedBottles');
        return saved || [];
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–≥
     */
    loadKegs() {
        const saved = this.system.loadFromLocalStorage('kegs');
        return saved || [
            { id: 1, name: '–°–≤–µ—Ç–ª–æ–µ –Ω–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ', tap: 1, volume: 50, currentVolume: 28.5, soldToday: 12.3 },
            { id: 2, name: '–¢–µ–º–Ω–æ–µ', tap: 2, volume: 30, currentVolume: 15.0, soldToday: 8.5 }
        ];
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫
     */
    renderOpenedBottles() {
        const tbody = document.querySelector('#openedBottlesBody');
        if (!tbody) return;

        if (this.openedBottles.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; padding: 2rem; color: #999;">
                        –û—Ç–∫—Ä—ã—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫ –Ω–µ—Ç
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = this.openedBottles.map(bottle => {
            const product = this.system.products.find(p => p.id === bottle.productId);
            if (!product) return '';

            const remainingPercent = (bottle.remainingVolume / bottle.totalVolume) * 100;
            const statusColor = remainingPercent > 50 ? '#16a34a' : remainingPercent > 20 ? '#f59e0b' : '#ef4444';

            return `
                <tr>
                    <td><strong>${product.name}</strong></td>
                    <td>${bottle.totalVolume} –º–ª</td>
                    <td>
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <strong>${bottle.remainingVolume} –º–ª</strong>
                            <div style="flex: 1; background: #e5e7eb; height: 8px; border-radius: 4px; overflow: hidden;">
                                <div style="width: ${remainingPercent}%; height: 100%; background: ${statusColor}; transition: width 0.3s;"></div>
                            </div>
                            <span style="font-size: 0.85em; color: #666;">${remainingPercent.toFixed(0)}%</span>
                        </div>
                    </td>
                    <td>${bottle.openedAt ? new Date(bottle.openedAt).toLocaleString('ru-RU') : '‚Äî'}</td>
                    <td>
                        <button class="btn btn-secondary btn-small" onclick="barModule.pourFromBottle(${bottle.id}, 50)">
                            üç∏ –ù–∞–ª–∏—Ç—å (50 –º–ª)
                        </button>
                        <button class="btn btn-secondary btn-small" onclick="barModule.closeBottle(${bottle.id})">
                            üóëÔ∏è –£—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                    </td>
                </tr>
            `;
        }).filter(html => html).join('');
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–µ–≥
     */
    renderKegs() {
        const container = document.getElementById('kegsContainer');
        if (!container) return;

        container.innerHTML = this.kegs.map(keg => {
            const remainingPercent = (keg.currentVolume / keg.volume) * 100;
            const statusColor = remainingPercent > 50 ? '#16a34a' : remainingPercent > 20 ? '#f59e0b' : '#ef4444';

            return `
                <div style="background: rgba(255,255,255,0.05); padding: 1rem; border-radius: 8px; border: 1px solid rgba(255,255,255,0.12);">
                    <h4 style="margin: 0 0 0.5rem 0; color: #eebc5c;">
                        üç∫ –ö—Ä–∞–Ω ‚Ññ${keg.tap}: ${keg.name}
                    </h4>
                    
                    <div style="margin-bottom: 0.5rem;">
                        <div style="display: flex; justify-content: space-between; font-size: 0.9em; margin-bottom: 0.25rem; color: #F3EADB;">
                            <span>–í –∫–µ–≥–µ:</span>
                            <strong>${keg.currentVolume} –ª / ${keg.volume} –ª</strong>
                        </div>
                        <div style="background: rgba(0,0,0,0.3); height: 12px; border-radius: 6px; overflow: hidden;">
                            <div style="width: ${remainingPercent}%; height: 100%; background: ${statusColor}; transition: width 0.3s;"></div>
                        </div>
                    </div>
                    
                    <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); padding: 0.5rem; border-radius: 6px; margin-bottom: 0.5rem; font-size: 0.9em;">
                        –ü—Ä–æ–¥–∞–Ω–æ –∑–∞ —Å–º–µ–Ω—É: <strong>${keg.soldToday} –ª</strong>
                    </div>
                    
                    <div style="display: flex; gap: 0.5rem;">
                        <button class="btn btn-secondary btn-small" onclick="barModule.pourFromKeg(${keg.id}, 0.5)">
                            üç∫ 0.5 –ª
                        </button>
                        <button class="btn btn-secondary btn-small" onclick="barModule.pourFromKeg(${keg.id}, 0.3)">
                            üç∫ 0.3 –ª
                        </button>
                        <button class="btn btn-primary btn-small" onclick="barModule.replaceKeg(${keg.id})">
                            üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∫–µ–≥—É
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    /**
     * –í—Å–∫—Ä—ã—Ç–∏–µ –±—É—Ç—ã–ª–∫–∏
     */
    openBottle() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.7); display: flex; align-items: center;
            justify-content: center; z-index: 10000;
        `;

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–ª–∫–æ–≥–æ–ª—å
        const alcoholProducts = this.system.products.filter(p => p.isAlcohol);

        modal.innerHTML = `
            <div style="background: #094a45; color: #F3EADB; border: 1px solid rgba(255,255,255,0.12); border-radius: 16px; padding: 2rem; max-width: 500px; width: 90%;">
                <h2 style="margin: 0 0 1.5rem 0; color: #eebc5c;">üîì –í—Å–∫—Ä—ã—Ç–∏–µ –±—É—Ç—ã–ª–∫–∏</h2>

                <div class="form-group">
                    <label class="form-label">–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ç—ã–ª–∫—É*</label>
                    <select class="form-select" id="openBottleProduct">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                        ${alcoholProducts.map(p => `
                            <option value="${p.id}" data-volume="500">${p.name}</option>
                        `).join('')}
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">–û–±—ä—ë–º (–º–ª)</label>
                    <input type="number" class="form-input" id="openBottleVolume" value="500" step="50">
                </div>

                <div class="alert alert-info">
                    <span>‚ÑπÔ∏è</span>
                    <div>
                        <strong>–°–ø–∏—Å–∞–Ω–∏–µ –≤ –ï–ì–ê–ò–°</strong><br>
                        –ü—Ä–∏ –≤—Å–∫—Ä—ã—Ç–∏–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ø–æ–ª–Ω—ã–π –æ–±—ä—ë–º –±—É—Ç—ã–ª–∫–∏.
                        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.
                    </div>
                </div>

                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button onclick="barModule.saveOpenBottle()" class="btn btn-primary">
                        üîì –í—Å–∫—Ä—ã—Ç—å
                    </button>
                    <button onclick="this.closest('.modal-overlay').remove()" class="btn btn-secondary">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–∫—Ä—ã—Ç–∏—è –±—É—Ç—ã–ª–∫–∏
     */
    saveOpenBottle() {
        const productId = parseInt(document.getElementById('openBottleProduct').value);
        const totalVolume = parseInt(document.getElementById('openBottleVolume').value);

        if (!productId || !totalVolume) {
            alert('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }

        const product = this.system.products.find(p => p.id === productId);
        if (!product) return;

        // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–π –±—É—Ç—ã–ª–∫–µ
        const openedBottle = {
            id: Date.now(),
            productId,
            totalVolume,
            remainingVolume: totalVolume,
            openedAt: new Date().toISOString()
        };

        this.openedBottles.push(openedBottle);
        this.system.saveToLocalStorage('openedBottles', this.openedBottles);

        // –°–æ–∑–¥–∞—ë–º –∞–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è –≤ –ï–ì–ê–ò–°
        if (this.system.createEGAISAct) {
            this.system.createEGAISAct({
                operationType: 'sale',
                documentId: Date.now(),
                productId,
                quantity: 1, // 1 –±—É—Ç—ã–ª–∫–∞
                reason: '–í—Å–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏'
            });
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        document.querySelector('.modal-overlay').remove();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        this.renderOpenedBottles();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification(`‚úÖ –ë—É—Ç—ã–ª–∫–∞ "${product.name}" –≤—Å–∫—Ä—ã—Ç–∞!\nüì§ –ê–∫—Ç –ï–ì–ê–ò–° –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`, 'success');
    }

    /**
     * –ù–∞–ª–∏—Ç—å –∏–∑ –±—É—Ç—ã–ª–∫–∏
     */
    pourFromBottle(bottleId, volume) {
        const bottle = this.openedBottles.find(b => b.id === bottleId);
        if (!bottle) return;

        if (bottle.remainingVolume < volume) {
            alert(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–∞ –≤ –±—É—Ç—ã–ª–∫–µ!\n–û—Å—Ç–∞—Ç–æ–∫: ${bottle.remainingVolume} –º–ª`);
            return;
        }

        bottle.remainingVolume -= volume;

        // –ï—Å–ª–∏ –±—É—Ç—ã–ª–∫–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º
        if (bottle.remainingVolume <= 0) {
            this.openedBottles = this.openedBottles.filter(b => b.id !== bottleId);
            this.showNotification('üóëÔ∏è –ë—É—Ç—ã–ª–∫–∞ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞', 'info');
        }

        this.system.saveToLocalStorage('openedBottles', this.openedBottles);
        this.renderOpenedBottles();
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å/—É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—É—Ç—ã–ª–∫—É
     */
    closeBottle(bottleId) {
        const bottle = this.openedBottles.find(b => b.id === bottleId);
        if (!bottle) return;

        const product = this.system.products.find(p => p.id === bottle.productId);
        
        if (!confirm(`üóëÔ∏è –£—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—É—Ç—ã–ª–∫—É "${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"?\n\n–û—Å—Ç–∞—Ç–æ–∫: ${bottle.remainingVolume} –º–ª –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –∫–∞–∫ —Ç–µ—Ö–ø–æ—Ç–µ—Ä–∏.`)) {
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –∞–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Ö–ø–æ—Ç–µ—Ä—å
        if (bottle.remainingVolume > 0 && this.system.createEGAISAct) {
            this.system.createEGAISAct({
                operationType: 'writeoff',
                productId: bottle.productId,
                quantity: bottle.remainingVolume / 1000, // –≤ –ª–∏—Ç—Ä–∞—Ö
                reason: '–¢–µ—Ö–ø–æ—Ç–µ—Ä–∏/–ø—Ä–æ–ª–∏–≤'
            });
        }

        // –£–¥–∞–ª—è–µ–º –±—É—Ç—ã–ª–∫—É
        this.openedBottles = this.openedBottles.filter(b => b.id !== bottleId);
        this.system.saveToLocalStorage('openedBottles', this.openedBottles);

        this.renderOpenedBottles();
        this.showNotification('üóëÔ∏è –ë—É—Ç—ã–ª–∫–∞ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'success');
    }

    /**
     * –ù–∞–ª–∏—Ç—å –∏–∑ –∫–µ–≥–∏
     */
    pourFromKeg(kegId, volume) {
        const keg = this.kegs.find(k => k.id === kegId);
        if (!keg) return;

        if (keg.currentVolume < volume) {
            alert(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–≤–∞ –≤ –∫–µ–≥–µ!\n–û—Å—Ç–∞—Ç–æ–∫: ${keg.currentVolume} –ª`);
            return;
        }

        keg.currentVolume = Math.max(0, keg.currentVolume - volume);
        keg.soldToday = (keg.soldToday || 0) + volume;

        this.system.saveToLocalStorage('kegs', this.kegs);
        this.renderKegs();

        this.showNotification(`üç∫ –ù–∞–ª–∏—Ç–æ ${volume} –ª –∏–∑ –∫—Ä–∞–Ω–∞ ‚Ññ${keg.tap}`, 'success');
    }

    /**
     * –ó–∞–º–µ–Ω–∞ –∫–µ–≥–∏
     */
    replaceKeg(kegId) {
        const keg = this.kegs.find(k => k.id === kegId);
        if (!keg) return;

        if (!confirm(`üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∫–µ–≥—É –Ω–∞ –∫—Ä–∞–Ω–µ ‚Ññ${keg.tap}?\n\n–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${keg.currentVolume} –ª –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –∫–∞–∫ —Ç–µ—Ö–ø–æ—Ç–µ—Ä–∏.`)) {
            return;
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        if (keg.currentVolume > 0) {
            // –°–æ–∑–¥–∞—ë–º –∞–∫—Ç —Å–ø–∏—Å–∞–Ω–∏—è –≤ –ï–ì–ê–ò–°
            if (this.system.createEGAISAct) {
                this.system.createEGAISAct({
                    operationType: 'writeoff',
                    productId: keg.productId,
                    quantity: keg.currentVolume,
                    reason: '–¢–µ—Ö–ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –∫–µ–≥–∏'
                });
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–µ–≥—É
        keg.currentVolume = keg.volume;
        keg.soldToday = 0;

        this.system.saveToLocalStorage('kegs', this.kegs);
        this.renderKegs();

        this.showNotification(`‚úÖ –ö–µ–≥–∞ –Ω–∞ –∫—Ä–∞–Ω–µ ‚Ññ${keg.tap} –∑–∞–º–µ–Ω–µ–Ω–∞!`, 'success');
    }

    /**
     * –°–≤–µ—Ä–∫–∞ —Å —Ä–∞—Å—Ö–æ–¥–æ–º–µ—Ä–æ–º
     */
    syncWithFlowMeter(kegId) {
        alert('üîÑ –°–≤–µ—Ä–∫–∞ —Å —Ä–∞—Å—Ö–æ–¥–æ–º–µ—Ä–æ–º\n\n–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...\n\n–ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º');
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10001;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            animation: slideIn 0.3s ease-out;
            ${type === 'success' ? 'background: #16a34a;' : ''}
            ${type === 'error' ? 'background: #dc2626;' : ''}
            ${type === 'info' ? 'background: #2563eb;' : ''}
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// Export
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BarModule;
}

